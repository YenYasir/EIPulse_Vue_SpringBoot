(function() {
  var App, Router, Server, Signal, assign;

  Signal = require("../signal");

  Router = require("../router");

  Server = require("../server");

  assign = require("lodash").assign;

  App = (function() {
    App.events = ["error"];

    function App() {
      this.router = new Router();
      this.signals = {};
      this.constructor.events.forEach((function(_this) {
        return function(name) {
          return _this.signals[name] = new Signal();
        };
      })(this));
    }

    App.prototype.on = function(name, fn) {
      return this.addListener(name, fn);
    };

    App.prototype.addListener = function(name, fn) {
      return this.signals[name].addListener(fn);
    };

    App.prototype.removeListener = function(name, fn) {
      return this.signals[name].removeListener(fn);
    };

    App.prototype.accept = function(transport) {
      var dispatch, state;
      transport.on("error", (function(_this) {
        return function(err) {
          return _this.signals.error.emit(err);
        };
      })(this));
      state = {};
      dispatch = (function(_this) {
        return function(frame) {
          var context;
          context = Object.create(transport);
          assign(context, frame, {
            state: state
          });
          return _this.router.dispatch(context, function(err) {
            if (err) {
              return _this.signals.error.emit(err);
            }
          });
        };
      })(this);
      transport.on("frame", function(frame) {
        return dispatch(frame);
      });
      transport.on("close", function() {
        return dispatch({
          command: "DISCONNECT",
          headers: {}
        });
      });
      return null;
    };

    App.prototype.mount = function(params) {
      var server;
      server = new Server(params);
      server.on("connection", this.accept.bind(this));
      return server;
    };

    App.prototype.listen = function(port) {
      return this.mount({
        port: port
      });
    };

    return App;

  })();

  Router.commands.concat(["use"]).forEach(function(name) {
    return App.prototype[name] = function() {
      return this.router[name].apply(this.router, arguments);
    };
  });

  module.exports = App;

}).call(this);

//# sourceMappingURL=data:application/json;base64,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LENBQUMsUUFBUSxDQUFDLE1BQWhCLENBQXVCLENBQUUsS0FBRixDQUF2QixDQUFpQyxDQUFDLE9BQWxDLENBQTBDLFNBQUMsSUFBRDtXQUN4QyxHQUFHLENBQUMsU0FBVSxDQUFBLElBQUEsQ0FBZCxHQUFzQixTQUFBO2FBQ3BCLElBQUMsQ0FBQSxNQUFPLENBQUEsSUFBQSxDQUFLLENBQUMsS0FBZCxDQUFvQixJQUFDLENBQUEsTUFBckIsRUFBNkIsU0FBN0I7SUFEb0I7RUFEa0IsQ0FBMUM7O0VBSUEsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUE1RGpCIiwiZmlsZSI6ImFwcC9hcHAuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJTaWduYWwgPSByZXF1aXJlIFwiLi4vc2lnbmFsXCJcblJvdXRlciA9IHJlcXVpcmUgXCIuLi9yb3V0ZXJcIlxuU2VydmVyID0gcmVxdWlyZSBcIi4uL3NlcnZlclwiXG57YXNzaWdufSA9IHJlcXVpcmUgXCJsb2Rhc2hcIlxuXG5jbGFzcyBBcHBcbiAgQGV2ZW50cyA9IFtcImVycm9yXCJdXG4gIFxuICBjb25zdHJ1Y3RvcjogLT5cbiAgICBAcm91dGVyID0gbmV3IFJvdXRlcigpXG4gICAgXG4gICAgQHNpZ25hbHMgPSB7fVxuICAgIEBjb25zdHJ1Y3Rvci5ldmVudHMuZm9yRWFjaCAobmFtZSkgPT5cbiAgICAgIEBzaWduYWxzW25hbWVdID0gbmV3IFNpZ25hbCgpXG4gIFxuICBvbjogKG5hbWUsIGZuKSAtPlxuICAgIEBhZGRMaXN0ZW5lcihuYW1lLCBmbilcbiAgXG4gIGFkZExpc3RlbmVyOiAobmFtZSwgZm4pIC0+XG4gICAgQHNpZ25hbHNbbmFtZV0uYWRkTGlzdGVuZXIoZm4pXG4gIFxuICByZW1vdmVMaXN0ZW5lcjogKG5hbWUsIGZuKSAtPlxuICAgIEBzaWduYWxzW25hbWVdLnJlbW92ZUxpc3RlbmVyKGZuKVxuICBcbiAgYWNjZXB0OiAodHJhbnNwb3J0KSAtPlxuICAgIHRyYW5zcG9ydC5vbiBcImVycm9yXCIsIChlcnIpID0+XG4gICAgICBAc2lnbmFscy5lcnJvci5lbWl0IGVyclxuICAgIFxuICAgIHN0YXRlID0ge31cbiAgICBcbiAgICBkaXNwYXRjaCA9IChmcmFtZSkgPT5cbiAgICAgIGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKHRyYW5zcG9ydClcbiAgICAgIGFzc2lnbihjb250ZXh0LCBmcmFtZSwgeyBzdGF0ZTogc3RhdGUgfSlcbiAgICAgIFxuICAgICAgQHJvdXRlci5kaXNwYXRjaCBjb250ZXh0LCAoZXJyKSA9PlxuICAgICAgICBpZiBlcnJcbiAgICAgICAgICBAc2lnbmFscy5lcnJvci5lbWl0IGVyclxuICAgIFxuICAgIHRyYW5zcG9ydC5vbiBcImZyYW1lXCIsIChmcmFtZSkgLT5cbiAgICAgIGRpc3BhdGNoIGZyYW1lXG4gICAgXG4gICAgdHJhbnNwb3J0Lm9uIFwiY2xvc2VcIiwgLT5cbiAgICAgIGRpc3BhdGNoXG4gICAgICAgIGNvbW1hbmQ6IFwiRElTQ09OTkVDVFwiXG4gICAgICAgIGhlYWRlcnM6IHt9XG4gICAgXG4gICAgcmV0dXJuIG51bGxcbiAgXG4gIG1vdW50OiAocGFyYW1zKSAtPlxuICAgIHNlcnZlciA9IG5ldyBTZXJ2ZXIocGFyYW1zKVxuICAgIHNlcnZlci5vbiBcImNvbm5lY3Rpb25cIiwgQGFjY2VwdC5iaW5kKHRoaXMpXG4gICAgcmV0dXJuIHNlcnZlclxuICBcbiAgbGlzdGVuOiAocG9ydCkgLT5cbiAgICByZXR1cm4gQG1vdW50KHBvcnQ6IHBvcnQpXG5cblJvdXRlci5jb21tYW5kcy5jb25jYXQoWyBcInVzZVwiIF0pLmZvckVhY2ggKG5hbWUpIC0+XG4gIEFwcC5wcm90b3R5cGVbbmFtZV0gPSAtPlxuICAgIEByb3V0ZXJbbmFtZV0uYXBwbHkoQHJvdXRlciwgYXJndW1lbnRzKVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcFxuIl19
