(function() {
  var App, ClientTransport, EventEmitter, ServerTransport, WebSocket, assert, bluebird, findOpenPort, http, portfinder, sinon;

  App = require("./app");

  EventEmitter = require("events").EventEmitter;

  sinon = require("sinon-commonjs");

  assert = require("assert");

  WebSocket = require("ws");

  http = require("http");

  ClientTransport = require("../client-transport");

  ServerTransport = require("../server-transport");

  portfinder = require("portfinder");

  bluebird = require("bluebird");

  findOpenPort = bluebird.promisify(portfinder.getPort);

  describe("App", function() {
    describe("accept", function() {
      beforeEach(function() {
        this.app = new App();
        this.socket = new EventEmitter();
        this.transport = new ServerTransport(this.socket);
        this.transport.sendFrame = sinon.spy();
        this.transport.emit = function(name, data) {
          return this.signals[name].emit(data);
        };
        return this.app.accept(this.transport);
      });
      it("should dispatch socket messages", function() {
        var connect;
        this.app.connect(function(next) {
          return this.connected({
            "version": "1.2",
            "heart-beat": "0,0"
          });
        });
        connect = {
          command: "CONNECT",
          headers: {}
        };
        this.transport.emit("frame", connect);
        return assert(this.transport.sendFrame.called);
      });
      it("should fire disconnect at least once", function(done) {
        this.app.disconnect(function() {
          return done();
        });
        return this.transport.emit("close");
      });
      return it("should proto inherit the session", function(done) {
        this.app.use(function(next) {
          this.state.ok = true;
          return next();
        });
        this.app.use(function(next) {
          assert(this.state.ok);
          return done();
        });
        return this.transport.emit("frame", {});
      });
    });
    describe("mount", function() {
      return it("should attach to params for wss", function() {
        var app, httpServer;
        httpServer = http.createServer(function() {
          return null;
        });
        app = new App();
        return app.mount({
          server: httpServer
        });
      });
    });
    return describe("listen", function() {
      beforeEach(function() {
        return findOpenPort().then((function(_this) {
          return function(port) {
            return _this.port = port;
          };
        })(this));
      });
      return it("should accept connections", function(done) {
        var server, transport, ws;
        this.app = new App();
        server = this.app.listen(this.port);
        this.app.connect(function() {
          return server.close();
        });
        ws = new WebSocket("ws://localhost:" + this.port);
        transport = new ClientTransport(ws);
        transport.on("open", function() {
          return transport.connect({
            "accept-version": "1.2",
            "host": "test"
          });
        });
        return transport.on("close", function() {
          return done();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QixDQUF0QjtNQWI4QixDQUFoQztJQUxpQixDQUFuQjtFQWhEYyxDQUFoQjtBQWJBIiwiZmlsZSI6ImFwcC9hcHAtdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkFwcCA9IHJlcXVpcmUgXCIuL2FwcFwiXG57RXZlbnRFbWl0dGVyfSA9IHJlcXVpcmUgXCJldmVudHNcIlxuc2lub24gPSByZXF1aXJlIFwic2lub24tY29tbW9uanNcIlxuYXNzZXJ0ID0gcmVxdWlyZSBcImFzc2VydFwiXG5XZWJTb2NrZXQgPSByZXF1aXJlIFwid3NcIlxuaHR0cCA9IHJlcXVpcmUgXCJodHRwXCJcbkNsaWVudFRyYW5zcG9ydCA9IHJlcXVpcmUgXCIuLi9jbGllbnQtdHJhbnNwb3J0XCJcblNlcnZlclRyYW5zcG9ydCA9IHJlcXVpcmUgXCIuLi9zZXJ2ZXItdHJhbnNwb3J0XCJcblxucG9ydGZpbmRlciA9IHJlcXVpcmUgXCJwb3J0ZmluZGVyXCJcbmJsdWViaXJkID0gcmVxdWlyZSBcImJsdWViaXJkXCJcbmZpbmRPcGVuUG9ydCA9IGJsdWViaXJkLnByb21pc2lmeShwb3J0ZmluZGVyLmdldFBvcnQpXG5cbmRlc2NyaWJlIFwiQXBwXCIsIC0+XG4gIGRlc2NyaWJlIFwiYWNjZXB0XCIsIC0+XG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgQGFwcCA9IG5ldyBBcHAoKVxuICAgICAgXG4gICAgICBAc29ja2V0ID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gICAgICBAdHJhbnNwb3J0ID0gbmV3IFNlcnZlclRyYW5zcG9ydChAc29ja2V0KVxuICAgICAgQHRyYW5zcG9ydC5zZW5kRnJhbWUgPSBzaW5vbi5zcHkoKVxuICAgICAgQHRyYW5zcG9ydC5lbWl0ID0gKG5hbWUsIGRhdGEpIC0+XG4gICAgICAgIEBzaWduYWxzW25hbWVdLmVtaXQoZGF0YSlcbiAgICAgIFxuICAgICAgQGFwcC5hY2NlcHQgQHRyYW5zcG9ydFxuXG4gICAgaXQgXCJzaG91bGQgZGlzcGF0Y2ggc29ja2V0IG1lc3NhZ2VzXCIsIC0+XG4gICAgICBAYXBwLmNvbm5lY3QgKG5leHQpIC0+XG4gICAgICAgIEBjb25uZWN0ZWRcbiAgICAgICAgICBcInZlcnNpb25cIjogXCIxLjJcIlxuICAgICAgICAgIFwiaGVhcnQtYmVhdFwiOiBcIjAsMFwiXG4gICAgICBcbiAgICAgIGNvbm5lY3QgPVxuICAgICAgICBjb21tYW5kOiBcIkNPTk5FQ1RcIlxuICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgXG4gICAgICBAdHJhbnNwb3J0LmVtaXQgXCJmcmFtZVwiLCBjb25uZWN0XG4gICAgICBhc3NlcnQgQHRyYW5zcG9ydC5zZW5kRnJhbWUuY2FsbGVkXG5cbiAgICBpdCBcInNob3VsZCBmaXJlIGRpc2Nvbm5lY3QgYXQgbGVhc3Qgb25jZVwiLCAoZG9uZSkgLT5cbiAgICAgIEBhcHAuZGlzY29ubmVjdCAtPlxuICAgICAgICBkb25lKClcbiAgICAgIEB0cmFuc3BvcnQuZW1pdCBcImNsb3NlXCJcblxuICAgIGl0IFwic2hvdWxkIHByb3RvIGluaGVyaXQgdGhlIHNlc3Npb25cIiwgKGRvbmUpIC0+XG4gICAgICBAYXBwLnVzZSAobmV4dCkgLT5cbiAgICAgICAgQHN0YXRlLm9rID0gdHJ1ZVxuICAgICAgICBuZXh0KClcbiAgICAgIFxuICAgICAgQGFwcC51c2UgKG5leHQpIC0+XG4gICAgICAgIGFzc2VydCBAc3RhdGUub2tcbiAgICAgICAgZG9uZSgpXG4gICAgICBcbiAgICAgIEB0cmFuc3BvcnQuZW1pdCBcImZyYW1lXCIsIHt9XG4gIFxuICBkZXNjcmliZSBcIm1vdW50XCIsIC0+XG4gICAgaXQgXCJzaG91bGQgYXR0YWNoIHRvIHBhcmFtcyBmb3Igd3NzXCIsIC0+XG4gICAgICBodHRwU2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoLT4gbnVsbClcbiAgICAgIGFwcCA9IG5ldyBBcHAoKVxuICAgICAgYXBwLm1vdW50KHNlcnZlcjogaHR0cFNlcnZlcilcbiAgXG4gIGRlc2NyaWJlIFwibGlzdGVuXCIsIC0+XG4gICAgYmVmb3JlRWFjaCAtPlxuICAgICAgZmluZE9wZW5Qb3J0KCkudGhlbiAocG9ydCkgPT5cbiAgICAgICAgQHBvcnQgPSBwb3J0XG4gICAgXG4gICAgaXQgXCJzaG91bGQgYWNjZXB0IGNvbm5lY3Rpb25zXCIsIChkb25lKSAtPlxuICAgICAgQGFwcCA9IG5ldyBBcHAoKVxuICAgICAgc2VydmVyID0gQGFwcC5saXN0ZW4gQHBvcnRcbiAgICAgIFxuICAgICAgQGFwcC5jb25uZWN0IC0+XG4gICAgICAgIHNlcnZlci5jbG9zZSgpXG4gICAgICBcbiAgICAgIHdzID0gbmV3IFdlYlNvY2tldChcIndzOi8vbG9jYWxob3N0OiN7IEBwb3J0IH1cIilcbiAgICAgIHRyYW5zcG9ydCA9IG5ldyBDbGllbnRUcmFuc3BvcnQod3MpXG4gICAgICBcbiAgICAgIHRyYW5zcG9ydC5vbiBcIm9wZW5cIiwgLT5cbiAgICAgICAgdHJhbnNwb3J0LmNvbm5lY3QgeyBcImFjY2VwdC12ZXJzaW9uXCI6IFwiMS4yXCIsIFwiaG9zdFwiOiBcInRlc3RcIiB9XG4gICAgICBcbiAgICAgIHRyYW5zcG9ydC5vbiBcImNsb3NlXCIsIC0+XG4gICAgICAgIGRvbmUoKVxuIl19
