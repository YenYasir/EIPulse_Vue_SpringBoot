(function() {
  var Frame, assert;

  assert = require("assert");

  Frame = require("./frame");

  describe("Frame", function() {
    describe("toString", function() {
      it("should serialize connected", function() {
        var lines, packet;
        packet = Frame.toString({
          command: "CONNECTED",
          headers: {
            session: "abcde"
          }
        });
        lines = packet.split("\n");
        assert.equal(lines[0], "CONNECTED");
        assert.equal(lines[1], "session:abcde");
        assert.equal(lines[2], "");
        return assert.equal(lines[3], "\0");
      });
      return it("should write body and content length", function() {
        var body, length, matches, packet;
        body = "one two three";
        packet = Frame.toString({
          command: "MESSAGE",
          body: body
        });
        matches = packet.match(/(\d+)/);
        length = matches && parseInt(matches[1], 10);
        return assert.equal(length, body.length);
      });
    });
    return describe("fromString", function() {
      it("should parse connect packet", function() {
        var frame, packet;
        packet = ["CONNECT", "host:", "accept-version:1.2", "login:ajostrow", "passcode:secret", "\0"].join("\n");
        frame = Frame.fromString(packet);
        assert.equal(frame.command, "CONNECT");
        assert.equal(frame.headers["accept-version"], "1.2");
        assert.equal(frame.headers["host"], "");
        assert.equal(frame.headers["login"], "ajostrow");
        assert.equal(frame.headers["passcode"], "secret");
        return assert.equal(frame.body, null);
      });
      it("should parse packet with body", function() {
        var frame, packet;
        packet = [
          "SEND", "destination:/orders", "content-type:application/json; charset=utf-8", "", JSON.stringify({
            quantity: 10
          }), "\0"
        ].join("\n");
        frame = Frame.fromString(packet);
        assert.equal(frame.command, "SEND");
        assert.equal(frame.headers["destination"], "/orders");
        assert.equal(frame.headers["content-type"], "application/json; charset=utf-8");
        return assert.equal(frame.body, '{"quantity":10}');
      });
      it("should respect content length", function() {
        var frame, packet;
        packet = ["SEND", "content-length:5", "", "hello world", "\0"].join("\n");
        frame = Frame.fromString(packet);
        return assert.equal(frame.body, "hello");
      });
      it("should fail if content length larger than body", function() {
        var packet;
        packet = ["SEND", "content-length:10", "", "hey man", "\0"].join("\n");
        return assert.throws(function() {
          return Frame.fromString(packet);
        });
      });
      it("should should prefer earlier duplicate headers", function() {
        var frame, packet;
        packet = ["MESSAGE", "foo:OK", "foo:Not Ok", "\0"].join("\n");
        frame = Frame.fromString(packet);
        return assert.equal(frame.headers["foo"], "OK");
      });
      return it("should throw on one-line packet", function() {
        return assert.throws(function() {
          return Frame.fromString("CONNECT");
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZyYW1lL2ZyYW1lLXRlc3QuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0VBQ1QsS0FBQSxHQUFRLE9BQUEsQ0FBUSxTQUFSOztFQUVSLFFBQUEsQ0FBUyxPQUFULEVBQWtCLFNBQUE7SUFDaEIsUUFBQSxDQUFTLFVBQVQsRUFBcUIsU0FBQTtNQUNuQixFQUFBLENBQUcsNEJBQUgsRUFBaUMsU0FBQTtBQUMvQixZQUFBO1FBQUEsTUFBQSxHQUFTLEtBQUssQ0FBQyxRQUFOLENBQ1A7VUFBQSxPQUFBLEVBQVMsV0FBVDtVQUNBLE9BQUEsRUFDRTtZQUFBLE9BQUEsRUFBUyxPQUFUO1dBRkY7U0FETztRQUlULEtBQUEsR0FBUSxNQUFNLENBQUMsS0FBUCxDQUFhLElBQWI7UUFDUixNQUFNLENBQUMsS0FBUCxDQUFhLEtBQU0sQ0FBQSxDQUFBLENBQW5CLEVBQXVCLFdBQXZCO1FBQ0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFNLENBQUEsQ0FBQSxDQUFuQixFQUF1QixlQUF2QjtRQUNBLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBTSxDQUFBLENBQUEsQ0FBbkIsRUFBdUIsRUFBdkI7ZUFDQSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQU0sQ0FBQSxDQUFBLENBQW5CLEVBQXVCLElBQXZCO01BVCtCLENBQWpDO2FBV0EsRUFBQSxDQUFHLHNDQUFILEVBQTJDLFNBQUE7QUFDekMsWUFBQTtRQUFBLElBQUEsR0FBTztRQUNQLE1BQUEsR0FBUyxLQUFLLENBQUMsUUFBTixDQUNQO1VBQUEsT0FBQSxFQUFTLFNBQVQ7VUFDQSxJQUFBLEVBQU0sSUFETjtTQURPO1FBR1QsT0FBQSxHQUFVLE1BQU0sQ0FBQyxLQUFQLENBQWEsT0FBYjtRQUNWLE1BQUEsR0FBUyxPQUFBLElBQVcsUUFBQSxDQUFTLE9BQVEsQ0FBQSxDQUFBLENBQWpCLEVBQXFCLEVBQXJCO2VBQ3BCLE1BQU0sQ0FBQyxLQUFQLENBQWEsTUFBYixFQUFxQixJQUFJLENBQUMsTUFBMUI7TUFQeUMsQ0FBM0M7SUFabUIsQ0FBckI7V0FxQkEsUUFBQSxDQUFTLFlBQVQsRUFBdUIsU0FBQTtNQUNyQixFQUFBLENBQUcsNkJBQUgsRUFBa0MsU0FBQTtBQUNoQyxZQUFBO1FBQUEsTUFBQSxHQUFTLENBQ1AsU0FETyxFQUVQLE9BRk8sRUFHUCxvQkFITyxFQUlQLGdCQUpPLEVBS1AsaUJBTE8sRUFNUCxJQU5PLENBT1IsQ0FBQyxJQVBPLENBT0YsSUFQRTtRQVFULEtBQUEsR0FBUSxLQUFLLENBQUMsVUFBTixDQUFpQixNQUFqQjtRQUNSLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBSyxDQUFDLE9BQW5CLEVBQTRCLFNBQTVCO1FBQ0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsT0FBUSxDQUFBLGdCQUFBLENBQTNCLEVBQThDLEtBQTlDO1FBQ0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsT0FBUSxDQUFBLE1BQUEsQ0FBM0IsRUFBb0MsRUFBcEM7UUFDQSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxPQUFRLENBQUEsT0FBQSxDQUEzQixFQUFxQyxVQUFyQztRQUNBLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBSyxDQUFDLE9BQVEsQ0FBQSxVQUFBLENBQTNCLEVBQXdDLFFBQXhDO2VBQ0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsSUFBbkIsRUFBeUIsSUFBekI7TUFmZ0MsQ0FBbEM7TUFpQkEsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUE7QUFDbEMsWUFBQTtRQUFBLE1BQUEsR0FBUztVQUNQLE1BRE8sRUFFUCxxQkFGTyxFQUdQLDhDQUhPLEVBSVAsRUFKTyxFQUtQLElBQUksQ0FBQyxTQUFMLENBQWU7WUFBQSxRQUFBLEVBQVUsRUFBVjtXQUFmLENBTE8sRUFNUCxJQU5PO1NBT1IsQ0FBQyxJQVBPLENBT0YsSUFQRTtRQVFULEtBQUEsR0FBUSxLQUFLLENBQUMsVUFBTixDQUFpQixNQUFqQjtRQUNSLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBSyxDQUFDLE9BQW5CLEVBQTRCLE1BQTVCO1FBQ0EsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsT0FBUSxDQUFBLGFBQUEsQ0FBM0IsRUFBMkMsU0FBM0M7UUFDQSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxPQUFRLENBQUEsY0FBQSxDQUEzQixFQUE0QyxpQ0FBNUM7ZUFDQSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxJQUFuQixFQUF5QixpQkFBekI7TUFia0MsQ0FBcEM7TUFlQSxFQUFBLENBQUcsK0JBQUgsRUFBb0MsU0FBQTtBQUNsQyxZQUFBO1FBQUEsTUFBQSxHQUFTLENBQ1AsTUFETyxFQUVQLGtCQUZPLEVBR1AsRUFITyxFQUlQLGFBSk8sRUFLUCxJQUxPLENBTVIsQ0FBQyxJQU5PLENBTUYsSUFORTtRQU9ULEtBQUEsR0FBUSxLQUFLLENBQUMsVUFBTixDQUFpQixNQUFqQjtlQUNSLE1BQU0sQ0FBQyxLQUFQLENBQWEsS0FBSyxDQUFDLElBQW5CLEVBQXlCLE9BQXpCO01BVGtDLENBQXBDO01BV0EsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUE7QUFDbkQsWUFBQTtRQUFBLE1BQUEsR0FBUyxDQUNQLE1BRE8sRUFFUCxtQkFGTyxFQUdQLEVBSE8sRUFJUCxTQUpPLEVBS1AsSUFMTyxDQU1SLENBQUMsSUFOTyxDQU1GLElBTkU7ZUFPVCxNQUFNLENBQUMsTUFBUCxDQUFjLFNBQUE7aUJBQ1osS0FBSyxDQUFDLFVBQU4sQ0FBaUIsTUFBakI7UUFEWSxDQUFkO01BUm1ELENBQXJEO01BV0EsRUFBQSxDQUFHLGdEQUFILEVBQXFELFNBQUE7QUFDbkQsWUFBQTtRQUFBLE1BQUEsR0FBUyxDQUNQLFNBRE8sRUFFUCxRQUZPLEVBR1AsWUFITyxFQUlQLElBSk8sQ0FLUixDQUFDLElBTE8sQ0FLRixJQUxFO1FBTVQsS0FBQSxHQUFRLEtBQUssQ0FBQyxVQUFOLENBQWlCLE1BQWpCO2VBQ1IsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsT0FBUSxDQUFBLEtBQUEsQ0FBM0IsRUFBbUMsSUFBbkM7TUFSbUQsQ0FBckQ7YUFVQSxFQUFBLENBQUcsaUNBQUgsRUFBc0MsU0FBQTtlQUNwQyxNQUFNLENBQUMsTUFBUCxDQUFjLFNBQUE7aUJBQ1osS0FBSyxDQUFDLFVBQU4sQ0FBaUIsU0FBakI7UUFEWSxDQUFkO01BRG9DLENBQXRDO0lBakVxQixDQUF2QjtFQXRCZ0IsQ0FBbEI7QUFIQSIsImZpbGUiOiJmcmFtZS9mcmFtZS10ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiYXNzZXJ0ID0gcmVxdWlyZSBcImFzc2VydFwiXG5GcmFtZSA9IHJlcXVpcmUgXCIuL2ZyYW1lXCJcblxuZGVzY3JpYmUgXCJGcmFtZVwiLCAtPlxuICBkZXNjcmliZSBcInRvU3RyaW5nXCIsIC0+XG4gICAgaXQgXCJzaG91bGQgc2VyaWFsaXplIGNvbm5lY3RlZFwiLCAtPlxuICAgICAgcGFja2V0ID0gRnJhbWUudG9TdHJpbmdcbiAgICAgICAgY29tbWFuZDogXCJDT05ORUNURURcIlxuICAgICAgICBoZWFkZXJzOlxuICAgICAgICAgIHNlc3Npb246IFwiYWJjZGVcIlxuICAgICAgbGluZXMgPSBwYWNrZXQuc3BsaXQoXCJcXG5cIilcbiAgICAgIGFzc2VydC5lcXVhbCBsaW5lc1swXSwgXCJDT05ORUNURURcIlxuICAgICAgYXNzZXJ0LmVxdWFsIGxpbmVzWzFdLCBcInNlc3Npb246YWJjZGVcIlxuICAgICAgYXNzZXJ0LmVxdWFsIGxpbmVzWzJdLCBcIlwiXG4gICAgICBhc3NlcnQuZXF1YWwgbGluZXNbM10sIFwiXFwwXCJcblxuICAgIGl0IFwic2hvdWxkIHdyaXRlIGJvZHkgYW5kIGNvbnRlbnQgbGVuZ3RoXCIsIC0+XG4gICAgICBib2R5ID0gXCJvbmUgdHdvIHRocmVlXCJcbiAgICAgIHBhY2tldCA9IEZyYW1lLnRvU3RyaW5nXG4gICAgICAgIGNvbW1hbmQ6IFwiTUVTU0FHRVwiXG4gICAgICAgIGJvZHk6IGJvZHlcbiAgICAgIG1hdGNoZXMgPSBwYWNrZXQubWF0Y2goLyhcXGQrKS8pXG4gICAgICBsZW5ndGggPSBtYXRjaGVzICYmIHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKVxuICAgICAgYXNzZXJ0LmVxdWFsIGxlbmd0aCwgYm9keS5sZW5ndGhcbiAgICAgIFxuICBkZXNjcmliZSBcImZyb21TdHJpbmdcIiwgLT5cbiAgICBpdCBcInNob3VsZCBwYXJzZSBjb25uZWN0IHBhY2tldFwiLCAtPlxuICAgICAgcGFja2V0ID0gW1xuICAgICAgICBcIkNPTk5FQ1RcIlxuICAgICAgICBcImhvc3Q6XCJcbiAgICAgICAgXCJhY2NlcHQtdmVyc2lvbjoxLjJcIlxuICAgICAgICBcImxvZ2luOmFqb3N0cm93XCJcbiAgICAgICAgXCJwYXNzY29kZTpzZWNyZXRcIlxuICAgICAgICBcIlxcMFwiXG4gICAgICBdLmpvaW4oXCJcXG5cIilcbiAgICAgIGZyYW1lID0gRnJhbWUuZnJvbVN0cmluZyhwYWNrZXQpXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuY29tbWFuZCwgXCJDT05ORUNUXCJcbiAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5oZWFkZXJzW1wiYWNjZXB0LXZlcnNpb25cIl0sIFwiMS4yXCJcbiAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5oZWFkZXJzW1wiaG9zdFwiXSwgXCJcIlxuICAgICAgYXNzZXJ0LmVxdWFsIGZyYW1lLmhlYWRlcnNbXCJsb2dpblwiXSwgXCJham9zdHJvd1wiXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuaGVhZGVyc1tcInBhc3Njb2RlXCJdLCBcInNlY3JldFwiXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuYm9keSwgbnVsbFxuICAgIFxuICAgIGl0IFwic2hvdWxkIHBhcnNlIHBhY2tldCB3aXRoIGJvZHlcIiwgLT5cbiAgICAgIHBhY2tldCA9IFtcbiAgICAgICAgXCJTRU5EXCJcbiAgICAgICAgXCJkZXN0aW5hdGlvbjovb3JkZXJzXCJcbiAgICAgICAgXCJjb250ZW50LXR5cGU6YXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiXG4gICAgICAgIFwiXCJcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkocXVhbnRpdHk6IDEwKVxuICAgICAgICBcIlxcMFwiXG4gICAgICBdLmpvaW4oXCJcXG5cIilcbiAgICAgIGZyYW1lID0gRnJhbWUuZnJvbVN0cmluZyhwYWNrZXQpICAgICAgXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuY29tbWFuZCwgXCJTRU5EXCJcbiAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5oZWFkZXJzW1wiZGVzdGluYXRpb25cIl0sIFwiL29yZGVyc1wiXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCJcbiAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5ib2R5LCAne1wicXVhbnRpdHlcIjoxMH0nXG4gICAgXG4gICAgaXQgXCJzaG91bGQgcmVzcGVjdCBjb250ZW50IGxlbmd0aFwiLCAtPlxuICAgICAgcGFja2V0ID0gW1xuICAgICAgICBcIlNFTkRcIlxuICAgICAgICBcImNvbnRlbnQtbGVuZ3RoOjVcIlxuICAgICAgICBcIlwiXG4gICAgICAgIFwiaGVsbG8gd29ybGRcIlxuICAgICAgICBcIlxcMFwiXG4gICAgICBdLmpvaW4oXCJcXG5cIilcbiAgICAgIGZyYW1lID0gRnJhbWUuZnJvbVN0cmluZyhwYWNrZXQpXG4gICAgICBhc3NlcnQuZXF1YWwgZnJhbWUuYm9keSwgXCJoZWxsb1wiXG4gICAgXG4gICAgaXQgXCJzaG91bGQgZmFpbCBpZiBjb250ZW50IGxlbmd0aCBsYXJnZXIgdGhhbiBib2R5XCIsIC0+XG4gICAgICBwYWNrZXQgPSBbXG4gICAgICAgIFwiU0VORFwiXG4gICAgICAgIFwiY29udGVudC1sZW5ndGg6MTBcIlxuICAgICAgICBcIlwiXG4gICAgICAgIFwiaGV5IG1hblwiXG4gICAgICAgIFwiXFwwXCJcbiAgICAgIF0uam9pbihcIlxcblwiKVxuICAgICAgYXNzZXJ0LnRocm93cyAtPlxuICAgICAgICBGcmFtZS5mcm9tU3RyaW5nKHBhY2tldClcbiAgICBcbiAgICBpdCBcInNob3VsZCBzaG91bGQgcHJlZmVyIGVhcmxpZXIgZHVwbGljYXRlIGhlYWRlcnNcIiwgLT5cbiAgICAgIHBhY2tldCA9IFtcbiAgICAgICAgXCJNRVNTQUdFXCIsXG4gICAgICAgIFwiZm9vOk9LXCIsXG4gICAgICAgIFwiZm9vOk5vdCBPa1wiLFxuICAgICAgICBcIlxcMFwiLFxuICAgICAgXS5qb2luKFwiXFxuXCIpXG4gICAgICBmcmFtZSA9IEZyYW1lLmZyb21TdHJpbmcocGFja2V0KVxuICAgICAgYXNzZXJ0LmVxdWFsIGZyYW1lLmhlYWRlcnNbXCJmb29cIl0sIFwiT0tcIlxuICAgIFxuICAgIGl0IFwic2hvdWxkIHRocm93IG9uIG9uZS1saW5lIHBhY2tldFwiLCAtPlxuICAgICAgYXNzZXJ0LnRocm93cyAtPlxuICAgICAgICBGcmFtZS5mcm9tU3RyaW5nKFwiQ09OTkVDVFwiKVxuICAgICAgXG4gICAgICAiXX0=
