(function() {
  var assign, each, fromString, ref, toString;

  ref = require("lodash"), assign = ref.assign, each = ref.each;

  toString = function(arg) {
    var body, command, headers, s;
    command = arg.command, headers = arg.headers, body = arg.body;
    headers = assign({}, headers);
    if (body) {
      headers['content-length'] = body.length;
    }
    s = command + "\n";
    each(headers, function(value, key) {
      return s += key + ":" + value + "\n";
    });
    s += "\n";
    if (body) {
      s += body;
    }
    s += "\0";
    return s;
  };

  fromString = function(s) {
    var body, command, end, frame, headers, key, line, sep, start, value;
    if (!(s && s.length > 0)) {
      return null;
    }
    if (s === "\n") {
      return null;
    }
    start = 0;
    command = null;
    while (true) {
      end = s.indexOf("\n", start);
      if (end === -1) {
        throw new Error("invalid command");
      }
      line = s.slice(start, end);
      start = end + 1;
      if (start >= s.length) {
        throw new Error("invalid command");
      }
      if (line !== "") {
        command = line;
        break;
      }
    }
    headers = {};
    while (true) {
      end = s.indexOf("\n", start);
      if (end === -1) {
        break;
      }
      line = s.slice(start, end);
      start = end + 1;
      if (line === "") {
        break;
      }
      sep = line.indexOf(":", 0);
      if (sep === -1) {
        throw new Error("invalid header: " + line);
      }
      key = line.slice(0, sep);
      if (!headers[key]) {
        value = line.slice(sep + 1);
        headers[key] = value;
      }
    }
    if (headers['content-length']) {
      headers['content-length'] = parseInt(headers['content-length'], 10);
    }
    body = (function() {
      if (headers['content-length']) {
        end = start + headers['content-length'];
        if (end > s.length) {
          throw new Error("invalid content length");
        }
        return s.slice(start, end);
      } else if (s[start] !== "\0") {
        end = s.length - 1;
        while (s[end] === "\n" || s[end] === "\0") {
          end -= 1;
          if (end <= start) {
            throw new Error("no frame terminator");
          }
        }
        return s.slice(start, end + 1);
      } else {
        return null;
      }
    })();
    frame = {
      command: command,
      headers: headers,
      body: body
    };
    return frame;
  };

  module.exports = {
    toString: toString,
    fromString: fromString
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUMsQ0FBQyxNQUFYO0FBQ0UsZ0JBQVUsSUFBQSxLQUFBLENBQU0sd0JBQU4sRUFEWjs7ZUFFQSxDQUFDLENBQUMsS0FBRixDQUFRLEtBQVIsRUFBZSxHQUFmLEVBSks7T0FBQSxNQUtGLElBQUcsQ0FBRSxDQUFBLEtBQUEsQ0FBRixLQUFZLElBQWY7UUFDSCxHQUFBLEdBQU0sQ0FBQyxDQUFDLE1BQUYsR0FBVztBQUNqQixlQUFNLENBQUUsQ0FBQSxHQUFBLENBQUYsS0FBVSxJQUFWLElBQWtCLENBQUUsQ0FBQSxHQUFBLENBQUYsS0FBVSxJQUFsQztVQUNFLEdBQUEsSUFBTztVQUNQLElBQUcsR0FBQSxJQUFPLEtBQVY7QUFDRSxrQkFBVSxJQUFBLEtBQUEsQ0FBTSxxQkFBTixFQURaOztRQUZGO2VBSUEsQ0FBQyxDQUFDLEtBQUYsQ0FBUSxLQUFSLEVBQWUsR0FBQSxHQUFNLENBQXJCLEVBTkc7T0FBQSxNQUFBO2VBUUgsS0FSRzs7O0lBVUwsS0FBQSxHQUNFO01BQUEsT0FBQSxFQUFTLE9BQVQ7TUFDQSxPQUFBLEVBQVMsT0FEVDtNQUVBLElBQUEsRUFBTSxJQUZOOztBQUdGLFdBQU87RUF6RUk7O0VBMkViLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0lBQUMsVUFBQSxRQUFEO0lBQVcsWUFBQSxVQUFYOztBQTFGakIiLCJmaWxlIjoiZnJhbWUvZnJhbWUuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyIjIFN0b21wIGZyYW1lXG4jIFNlZSBTVE9NUCAxLjJcblxue2Fzc2lnbiwgZWFjaH0gPSByZXF1aXJlIFwibG9kYXNoXCJcblxudG9TdHJpbmcgPSAoe2NvbW1hbmQsIGhlYWRlcnMsIGJvZHl9KSAtPiAgXG4gIGhlYWRlcnMgPSBhc3NpZ24oe30sIGhlYWRlcnMpXG4gIGlmIGJvZHlcbiAgICBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gYm9keS5sZW5ndGhcbiAgcyA9IGNvbW1hbmQgKyBcIlxcblwiXG4gIGVhY2ggaGVhZGVycywgKHZhbHVlLCBrZXkpIC0+XG4gICAgcyArPSBrZXkgKyBcIjpcIiArIHZhbHVlICsgXCJcXG5cIlxuICBzICs9IFwiXFxuXCJcbiAgaWYgYm9keVxuICAgIHMgKz0gYm9keVxuICBzICs9IFwiXFwwXCJcbiAgcmV0dXJuIHNcblxuZnJvbVN0cmluZyA9IChzKSAtPiAgXG4gIHVubGVzcyBzICYmIHMubGVuZ3RoID4gMFxuICAgIHJldHVybiBudWxsXG4gIFxuICAjIElnbm9yZSBoZWFydCBiZWF0c1xuICBpZiBzID09IFwiXFxuXCJcbiAgICByZXR1cm4gbnVsbFxuICBcbiAgIyBPbmUtcGFzcyBwYXJzZVxuICBzdGFydCA9IDBcbiAgXG4gIGNvbW1hbmQgPSBudWxsXG4gIGxvb3BcbiAgICAjIFBhcnNlIGxpbmVcbiAgICBlbmQgPSBzLmluZGV4T2YoXCJcXG5cIiwgc3RhcnQpXG4gICAgaWYgZW5kID09IC0xXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNvbW1hbmRcIilcbiAgICBcbiAgICBsaW5lID0gcy5zbGljZShzdGFydCwgZW5kKVxuICAgIHN0YXJ0ID0gZW5kICsgMVxuICAgIFxuICAgICMgQnJlYWsgb24gYmFkIGlucHV0XG4gICAgaWYgc3RhcnQgPj0gcy5sZW5ndGhcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29tbWFuZFwiKVxuICAgIFxuICAgIGlmIGxpbmUgIT0gXCJcIlxuICAgICAgY29tbWFuZCA9IGxpbmVcbiAgICAgIGJyZWFrXG4gICAgXG4gIGhlYWRlcnMgPSB7fVxuICBsb29wXG4gICAgIyBQYXJzZSBsaW5lXG4gICAgZW5kID0gcy5pbmRleE9mKFwiXFxuXCIsIHN0YXJ0KVxuICAgIGlmIGVuZCA9PSAtMVxuICAgICAgYnJlYWtcbiAgICBsaW5lID0gcy5zbGljZShzdGFydCwgZW5kKVxuICAgIHN0YXJ0ID0gZW5kICsgMVxuICAgIFxuICAgICMgRW5kIG9mIGhlYWRlcnMgaXMgZW1wdHkgbGluZVxuICAgIGlmIGxpbmUgPT0gXCJcIlxuICAgICAgYnJlYWtcbiAgICBcbiAgICBzZXAgPSBsaW5lLmluZGV4T2YoXCI6XCIsIDApXG4gICAgaWYgc2VwID09IC0xXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGhlYWRlcjogXCIgKyBsaW5lKVxuICAgIFxuICAgIGtleSA9IGxpbmUuc2xpY2UoMCwgc2VwKVxuICAgIHVubGVzcyBoZWFkZXJzW2tleV1cbiAgICAgIHZhbHVlID0gbGluZS5zbGljZShzZXAgKyAxKVxuICAgICAgaGVhZGVyc1trZXldID0gdmFsdWVcbiAgXG4gIGlmIGhlYWRlcnNbJ2NvbnRlbnQtbGVuZ3RoJ11cbiAgICBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gcGFyc2VJbnQoaGVhZGVyc1snY29udGVudC1sZW5ndGgnXSwgMTApXG4gICAgXG4gIGJvZHkgPSBpZiBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddXG4gICAgZW5kID0gc3RhcnQgKyBoZWFkZXJzWydjb250ZW50LWxlbmd0aCddXG4gICAgaWYgZW5kID4gcy5sZW5ndGhcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY29udGVudCBsZW5ndGhcIilcbiAgICBzLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIGVsc2UgaWYgc1tzdGFydF0gIT0gXCJcXDBcIlxuICAgIGVuZCA9IHMubGVuZ3RoIC0gMVxuICAgIHdoaWxlIHNbZW5kXSA9PSBcIlxcblwiIHx8IHNbZW5kXSA9PSBcIlxcMFwiXG4gICAgICBlbmQgLT0gMSAgICAgIFxuICAgICAgaWYgZW5kIDw9IHN0YXJ0XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vIGZyYW1lIHRlcm1pbmF0b3JcIilcbiAgICBzLnNsaWNlKHN0YXJ0LCBlbmQgKyAxKVxuICBlbHNlXG4gICAgbnVsbFxuICAgIFxuICBmcmFtZSA9IFxuICAgIGNvbW1hbmQ6IGNvbW1hbmRcbiAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgYm9keTogYm9keVxuICByZXR1cm4gZnJhbWVcblxubW9kdWxlLmV4cG9ydHMgPSB7dG9TdHJpbmcsIGZyb21TdHJpbmd9XG4iXX0=
