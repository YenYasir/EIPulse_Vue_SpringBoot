(function() {
  var Frame, Signal, Transport, fromCallback;

  Signal = require("../signal");

  Frame = require("../frame");

  fromCallback = require("bluebird").fromCallback;

  Transport = (function() {
    Transport.events = ["open", "message", "frame", "heartbeat", "error", "close"];

    function Transport(ws) {
      this.ws = ws;
      this.heartbeat = null;
      this.signals = {};
      this.constructor.events.forEach((function(_this) {
        return function(name) {
          return _this.signals[name] = new Signal();
        };
      })(this));
      this.ws.on("open", (function(_this) {
        return function() {
          return _this.signals.open.emit(true);
        };
      })(this));
      this.ws.on("message", (function(_this) {
        return function(message) {
          return _this.receiveMessage(message);
        };
      })(this));
      this.ws.on("error", (function(_this) {
        return function(err) {
          return _this.signals.error.emit(err);
        };
      })(this));
      this.ws.on("close", (function(_this) {
        return function() {
          clearInterval(_this.heartbeat);
          return _this.signals.close.emit(true);
        };
      })(this));
    }

    Transport.prototype.on = function(name, fn) {
      return this.addListener(name, fn);
    };

    Transport.prototype.addListener = function(name, fn) {
      return this.signals[name].addListener(fn);
    };

    Transport.prototype.removeListener = function(name, fn) {
      return this.signals[name].removeListener(fn);
    };

    Transport.prototype.receiveMessage = function(message) {
      var err, error, frame;
      if (/^\s*$/.test(message)) {
        return this.signals.heartbeat.emit(true);
      } else {
        try {
          frame = Frame.fromString(message);
          return this.signals.frame.emit(frame);
        } catch (error) {
          err = error;
          this.signals.error.emit(err);
          return this.close();
        }
      }
    };

    Transport.prototype.sendFrame = function(frame) {
      var message;
      message = Frame.toString(frame);
      return fromCallback((function(_this) {
        return function(onError) {
          return _this.ws.send(message, onError);
        };
      })(this));
    };

    Transport.prototype.sendHeartbeat = function() {
      return fromCallback((function(_this) {
        return function(onError) {
          return _this.ws.send("\n", onError);
        };
      })(this));
    };

    Transport.prototype.autoHeartbeat = function(ms) {
      var sendHeartbeat;
      sendHeartbeat = this.sendHeartbeat.bind(this);
      return this.heartbeat = setInterval(sendHeartbeat, ms);
    };

    Transport.prototype.close = function() {
      return this.ws.close();
    };

    return Transport;

  })();

  module.exports = Transport;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zcG9ydC90cmFuc3BvcnQuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLFdBQVI7O0VBQ1QsS0FBQSxHQUFRLE9BQUEsQ0FBUSxVQUFSOztFQUNQLGVBQWdCLE9BQUEsQ0FBUSxVQUFSLEVBQWhCOztFQUVLO0lBQ0osU0FBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLE1BQUQsRUFBUyxTQUFULEVBQW9CLE9BQXBCLEVBQTZCLFdBQTdCLEVBQTBDLE9BQTFDLEVBQW1ELE9BQW5EOztJQUVHLG1CQUFDLEVBQUQ7TUFDWCxJQUFDLENBQUEsRUFBRCxHQUFNO01BQ04sSUFBQyxDQUFBLFNBQUQsR0FBYTtNQUNiLElBQUMsQ0FBQSxPQUFELEdBQVc7TUFJWCxJQUFDLENBQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFwQixDQUE0QixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsSUFBRDtpQkFDMUIsS0FBQyxDQUFBLE9BQVEsQ0FBQSxJQUFBLENBQVQsR0FBcUIsSUFBQSxNQUFBLENBQUE7UUFESztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBNUI7TUFLQSxJQUFDLENBQUEsRUFBRSxDQUFDLEVBQUosQ0FBTyxNQUFQLEVBQWUsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUNiLEtBQUMsQ0FBQSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQWQsQ0FBbUIsSUFBbkI7UUFEYTtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZjtNQUdBLElBQUMsQ0FBQSxFQUFFLENBQUMsRUFBSixDQUFPLFNBQVAsRUFBa0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLE9BQUQ7aUJBQ2hCLEtBQUMsQ0FBQSxjQUFELENBQWdCLE9BQWhCO1FBRGdCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQjtNQUdBLElBQUMsQ0FBQSxFQUFFLENBQUMsRUFBSixDQUFPLE9BQVAsRUFBZ0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLEdBQUQ7aUJBQ2QsS0FBQyxDQUFBLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBZixDQUFvQixHQUFwQjtRQURjO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFoQjtNQUdBLElBQUMsQ0FBQSxFQUFFLENBQUMsRUFBSixDQUFPLE9BQVAsRUFBZ0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO1VBQ2QsYUFBQSxDQUFjLEtBQUMsQ0FBQSxTQUFmO2lCQUNBLEtBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQWYsQ0FBb0IsSUFBcEI7UUFGYztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7SUFyQlc7O3dCQXlCYixFQUFBLEdBQUksU0FBQyxJQUFELEVBQU8sRUFBUDthQUNGLElBQUMsQ0FBQSxXQUFELENBQWEsSUFBYixFQUFtQixFQUFuQjtJQURFOzt3QkFHSixXQUFBLEdBQWEsU0FBQyxJQUFELEVBQU8sRUFBUDthQUNYLElBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQSxDQUFLLENBQUMsV0FBZixDQUEyQixFQUEzQjtJQURXOzt3QkFHYixjQUFBLEdBQWdCLFNBQUMsSUFBRCxFQUFPLEVBQVA7YUFDZCxJQUFDLENBQUEsT0FBUSxDQUFBLElBQUEsQ0FBSyxDQUFDLGNBQWYsQ0FBOEIsRUFBOUI7SUFEYzs7d0JBR2hCLGNBQUEsR0FBZ0IsU0FBQyxPQUFEO0FBQ2QsVUFBQTtNQUFBLElBQUcsT0FBTyxDQUFDLElBQVIsQ0FBYSxPQUFiLENBQUg7ZUFDRSxJQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFuQixDQUF3QixJQUF4QixFQURGO09BQUEsTUFBQTtBQUdFO1VBQ0UsS0FBQSxHQUFRLEtBQUssQ0FBQyxVQUFOLENBQWlCLE9BQWpCO2lCQUNSLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQWYsQ0FBb0IsS0FBcEIsRUFGRjtTQUFBLGFBQUE7VUFHTTtVQUNKLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQWYsQ0FBb0IsR0FBcEI7aUJBQ0EsSUFBQyxDQUFBLEtBQUQsQ0FBQSxFQUxGO1NBSEY7O0lBRGM7O3dCQVdoQixTQUFBLEdBQVcsU0FBQyxLQUFEO0FBQ1QsVUFBQTtNQUFBLE9BQUEsR0FBVSxLQUFLLENBQUMsUUFBTixDQUFlLEtBQWY7YUFDVixZQUFBLENBQWEsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLE9BQUQ7aUJBQ1gsS0FBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLENBQVMsT0FBVCxFQUFrQixPQUFsQjtRQURXO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFiO0lBRlM7O3dCQUtYLGFBQUEsR0FBZSxTQUFBO2FBQ2IsWUFBQSxDQUFhLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxPQUFEO2lCQUNYLEtBQUMsQ0FBQSxFQUFFLENBQUMsSUFBSixDQUFTLElBQVQsRUFBZSxPQUFmO1FBRFc7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWI7SUFEYTs7d0JBSWYsYUFBQSxHQUFlLFNBQUMsRUFBRDtBQUNiLFVBQUE7TUFBQSxhQUFBLEdBQWdCLElBQUMsQ0FBQSxhQUFhLENBQUMsSUFBZixDQUFvQixJQUFwQjthQUNoQixJQUFDLENBQUEsU0FBRCxHQUFhLFdBQUEsQ0FBWSxhQUFaLEVBQTJCLEVBQTNCO0lBRkE7O3dCQUlmLEtBQUEsR0FBTyxTQUFBO2FBQ0wsSUFBQyxDQUFBLEVBQUUsQ0FBQyxLQUFKLENBQUE7SUFESzs7Ozs7O0VBR1QsTUFBTSxDQUFDLE9BQVAsR0FBaUI7QUFwRWpCIiwiZmlsZSI6InRyYW5zcG9ydC90cmFuc3BvcnQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJTaWduYWwgPSByZXF1aXJlIFwiLi4vc2lnbmFsXCJcbkZyYW1lID0gcmVxdWlyZSBcIi4uL2ZyYW1lXCJcbntmcm9tQ2FsbGJhY2t9ID0gcmVxdWlyZSBcImJsdWViaXJkXCJcblxuY2xhc3MgVHJhbnNwb3J0XG4gIEBldmVudHMgPSBbXCJvcGVuXCIsIFwibWVzc2FnZVwiLCBcImZyYW1lXCIsIFwiaGVhcnRiZWF0XCIsIFwiZXJyb3JcIiwgXCJjbG9zZVwiXVxuICBcbiAgY29uc3RydWN0b3I6ICh3cykgLT5cbiAgICBAd3MgPSB3c1xuICAgIEBoZWFydGJlYXQgPSBudWxsXG4gICAgQHNpZ25hbHMgPSB7fVxuICAgIFxuICAgICMgaW5pdCBzaWduYWxzXG4gICAgXG4gICAgQGNvbnN0cnVjdG9yLmV2ZW50cy5mb3JFYWNoIChuYW1lKSA9PlxuICAgICAgQHNpZ25hbHNbbmFtZV0gPSBuZXcgU2lnbmFsKClcbiAgICBcbiAgICAjIHByb3h5IHdlYnNvY2tldCBldmVudHNcbiAgICBcbiAgICBAd3Mub24gXCJvcGVuXCIsID0+XG4gICAgICBAc2lnbmFscy5vcGVuLmVtaXQgdHJ1ZVxuICAgIFxuICAgIEB3cy5vbiBcIm1lc3NhZ2VcIiwgKG1lc3NhZ2UpID0+XG4gICAgICBAcmVjZWl2ZU1lc3NhZ2UgbWVzc2FnZVxuICAgIFxuICAgIEB3cy5vbiBcImVycm9yXCIsIChlcnIpID0+XG4gICAgICBAc2lnbmFscy5lcnJvci5lbWl0IGVyclxuICAgIFxuICAgIEB3cy5vbiBcImNsb3NlXCIsID0+XG4gICAgICBjbGVhckludGVydmFsIEBoZWFydGJlYXRcbiAgICAgIEBzaWduYWxzLmNsb3NlLmVtaXQgdHJ1ZVxuICBcbiAgb246IChuYW1lLCBmbikgLT5cbiAgICBAYWRkTGlzdGVuZXIobmFtZSwgZm4pXG4gIFxuICBhZGRMaXN0ZW5lcjogKG5hbWUsIGZuKSAtPlxuICAgIEBzaWduYWxzW25hbWVdLmFkZExpc3RlbmVyKGZuKVxuICBcbiAgcmVtb3ZlTGlzdGVuZXI6IChuYW1lLCBmbikgLT5cbiAgICBAc2lnbmFsc1tuYW1lXS5yZW1vdmVMaXN0ZW5lcihmbilcbiAgXG4gIHJlY2VpdmVNZXNzYWdlOiAobWVzc2FnZSkgLT5cbiAgICBpZiAvXlxccyokLy50ZXN0IG1lc3NhZ2VcbiAgICAgIEBzaWduYWxzLmhlYXJ0YmVhdC5lbWl0IHRydWVcbiAgICBlbHNlXG4gICAgICB0cnlcbiAgICAgICAgZnJhbWUgPSBGcmFtZS5mcm9tU3RyaW5nKG1lc3NhZ2UpXG4gICAgICAgIEBzaWduYWxzLmZyYW1lLmVtaXQgZnJhbWVcbiAgICAgIGNhdGNoIGVyclxuICAgICAgICBAc2lnbmFscy5lcnJvci5lbWl0IGVyclxuICAgICAgICBAY2xvc2UoKVxuICBcbiAgc2VuZEZyYW1lOiAoZnJhbWUpIC0+XG4gICAgbWVzc2FnZSA9IEZyYW1lLnRvU3RyaW5nKGZyYW1lKVxuICAgIGZyb21DYWxsYmFjayAob25FcnJvcikgPT5cbiAgICAgIEB3cy5zZW5kIG1lc3NhZ2UsIG9uRXJyb3JcbiAgXG4gIHNlbmRIZWFydGJlYXQ6IC0+XG4gICAgZnJvbUNhbGxiYWNrIChvbkVycm9yKSA9PlxuICAgICAgQHdzLnNlbmQgXCJcXG5cIiwgb25FcnJvclxuICBcbiAgYXV0b0hlYXJ0YmVhdDogKG1zKSAtPlxuICAgIHNlbmRIZWFydGJlYXQgPSBAc2VuZEhlYXJ0YmVhdC5iaW5kKHRoaXMpXG4gICAgQGhlYXJ0YmVhdCA9IHNldEludGVydmFsIHNlbmRIZWFydGJlYXQsIG1zXG4gIFxuICBjbG9zZTogLT5cbiAgICBAd3MuY2xvc2UoKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydFxuIl19
