(function() {
  var EventEmitter, Transport, assert;

  assert = require("assert");

  Transport = require("./transport");

  EventEmitter = require("events");

  describe("Transport", function() {
    beforeEach(function() {
      this.ws = new EventEmitter();
      return this.transport = new Transport(this.ws);
    });
    describe("events", function() {
      it("should propagate open event", function(done) {
        this.transport.on("open", function() {
          return done();
        });
        return this.ws.emit("open");
      });
      it("should propagate error event", function(done) {
        this.transport.on("error", function(err) {
          assert.equal(err.message, "ok");
          return done();
        });
        return this.ws.emit("error", new Error("ok"));
      });
      return it("should propagate close event", function(done) {
        this.transport.on("close", function() {
          return done();
        });
        return this.ws.emit("close");
      });
    });
    describe("messages", function() {
      it("should emit heartbeats", function(done) {
        this.transport.on("heartbeat", function() {
          return done();
        });
        return this.ws.emit("message", "\n");
      });
      return it("should emit frames", function(done) {
        this.transport.on("frame", function(frame) {
          assert.equal(frame.command, "CONNECTED");
          return done();
        });
        return this.ws.emit("message", "CONNECTED\n\0");
      });
    });
    describe("close", function() {
      return it("should close the websocket", function(done) {
        this.ws.close = function() {
          return done();
        };
        return this.transport.close();
      });
    });
    describe("send frame", function() {
      it("should encode frames", function() {
        this.ws.send = function(message, fn) {
          assert.equal(message, "CONNECT\naccept-version:1.2\n\n\0");
          return fn(null);
        };
        return this.transport.sendFrame({
          command: "CONNECT",
          headers: {
            "accept-version": "1.2"
          }
        });
      });
      return it("should fail on error", function() {
        var onError, onSuccess;
        this.ws.send = function(message, fn) {
          return fn(new Error("websocket closed"));
        };
        onSuccess = function() {
          throw new Error("invalid code path");
        };
        onError = function(err) {
          return assert.equal(err.message, "websocket closed");
        };
        return this.transport.sendFrame({
          command: "CONNECTED"
        }).then(onSuccess, onError);
      });
    });
    describe("send heartbeat", function() {
      it("should send empty message", function() {
        this.ws.send = function(message, fn) {
          assert.equal(message, "\n");
          return fn();
        };
        return this.transport.sendHeartbeat();
      });
      return it("should fail on error", function() {
        var onError, onSuccess;
        this.ws.send = function(message, fn) {
          return fn(new Error("ok"));
        };
        onSuccess = function() {
          throw new Error("invalid code path");
        };
        onError = function(err) {
          return assert.equal(err.message, "ok");
        };
        return this.transport.sendHeartbeat().then(onSuccess, onError);
      });
    });
    return describe("auto heartbeat", function() {
      return it("should start timer", function(done) {
        var intid, onTimeout, outbox;
        outbox = [];
        this.ws.send = function(message, fn) {
          outbox.push(message);
          return fn();
        };
        intid = this.transport.autoHeartbeat(5);
        onTimeout = function() {
          clearInterval(intid);
          assert.equal(outbox.length, 2);
          return done();
        };
        return setTimeout(onTimeout, 14);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
