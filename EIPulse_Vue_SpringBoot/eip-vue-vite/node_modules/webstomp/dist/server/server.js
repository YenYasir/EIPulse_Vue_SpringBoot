(function() {
  var Server, ServerTransport, Signal, WebSocket;

  WebSocket = require("ws");

  Signal = require("../signal");

  ServerTransport = require("../server-transport");

  Server = (function() {
    Server.events = ["listening", "connection", "error"];

    function Server(params) {
      this.signals = {};
      this.constructor.events.forEach((function(_this) {
        return function(name) {
          return _this.signals[name] = new Signal();
        };
      })(this));
      this.server = WebSocket.createServer(params, (function(_this) {
        return function(ws) {
          return _this.receiveConnection(ws);
        };
      })(this));
      this.server.on("listening", (function(_this) {
        return function() {
          return _this.signals.listening.emit(true);
        };
      })(this));
      this.server.on("error", (function(_this) {
        return function(err) {
          return _this.signals.error.emit(err);
        };
      })(this));
    }

    Server.prototype.on = function(name, fn) {
      return this.addListener(name, fn);
    };

    Server.prototype.addListener = function(name, fn) {
      return this.signals[name].addListener(fn);
    };

    Server.prototype.removeListener = function(name, fn) {
      return this.signals[name].removeListener(fn);
    };

    Server.prototype.receiveConnection = function(ws) {
      var transport;
      transport = new ServerTransport(ws);
      return this.signals.connection.emit(transport);
    };

    Server.prototype.close = function() {
      return this.server.close();
    };

    return Server;

  })();

  module.exports = Server;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9zZXJ2ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxTQUFBLEdBQVksT0FBQSxDQUFRLElBQVI7O0VBQ1osTUFBQSxHQUFTLE9BQUEsQ0FBUSxXQUFSOztFQUNULGVBQUEsR0FBa0IsT0FBQSxDQUFRLHFCQUFSOztFQVFaO0lBQ0osTUFBQyxDQUFBLE1BQUQsR0FBVSxDQUFDLFdBQUQsRUFBYyxZQUFkLEVBQTRCLE9BQTVCOztJQUVHLGdCQUFDLE1BQUQ7TUFDWCxJQUFDLENBQUEsT0FBRCxHQUFXO01BQ1gsSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBcEIsQ0FBNEIsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLElBQUQ7aUJBQzFCLEtBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQSxDQUFULEdBQXFCLElBQUEsTUFBQSxDQUFBO1FBREs7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTVCO01BR0EsSUFBQyxDQUFBLE1BQUQsR0FBVSxTQUFTLENBQUMsWUFBVixDQUF1QixNQUF2QixFQUErQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsRUFBRDtpQkFDdkMsS0FBQyxDQUFBLGlCQUFELENBQW1CLEVBQW5CO1FBRHVDO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEvQjtNQUdWLElBQUMsQ0FBQSxNQUFNLENBQUMsRUFBUixDQUFXLFdBQVgsRUFBd0IsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUN0QixLQUFDLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFuQixDQUF3QixJQUF4QjtRQURzQjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBeEI7TUFHQSxJQUFDLENBQUEsTUFBTSxDQUFDLEVBQVIsQ0FBVyxPQUFYLEVBQW9CLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxHQUFEO2lCQUNsQixLQUFDLENBQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFmLENBQW9CLEdBQXBCO1FBRGtCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtJQVhXOztxQkFjYixFQUFBLEdBQUksU0FBQyxJQUFELEVBQU8sRUFBUDthQUNGLElBQUMsQ0FBQSxXQUFELENBQWEsSUFBYixFQUFtQixFQUFuQjtJQURFOztxQkFHSixXQUFBLEdBQWEsU0FBQyxJQUFELEVBQU8sRUFBUDthQUNYLElBQUMsQ0FBQSxPQUFRLENBQUEsSUFBQSxDQUFLLENBQUMsV0FBZixDQUEyQixFQUEzQjtJQURXOztxQkFHYixjQUFBLEdBQWdCLFNBQUMsSUFBRCxFQUFPLEVBQVA7YUFDZCxJQUFDLENBQUEsT0FBUSxDQUFBLElBQUEsQ0FBSyxDQUFDLGNBQWYsQ0FBOEIsRUFBOUI7SUFEYzs7cUJBR2hCLGlCQUFBLEdBQW1CLFNBQUMsRUFBRDtBQUNqQixVQUFBO01BQUEsU0FBQSxHQUFnQixJQUFBLGVBQUEsQ0FBZ0IsRUFBaEI7YUFDaEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBcEIsQ0FBeUIsU0FBekI7SUFGaUI7O3FCQUluQixLQUFBLEdBQU8sU0FBQTthQUNMLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFBO0lBREs7Ozs7OztFQUdULE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBM0NqQiIsImZpbGUiOiJzZXJ2ZXIvc2VydmVyLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiV2ViU29ja2V0ID0gcmVxdWlyZSBcIndzXCJcblNpZ25hbCA9IHJlcXVpcmUgXCIuLi9zaWduYWxcIlxuU2VydmVyVHJhbnNwb3J0ID0gcmVxdWlyZSBcIi4uL3NlcnZlci10cmFuc3BvcnRcIlxuXG4jIENyZWF0ZSBmcm9tIHBvcnRcbiMgICAgc2VydmVyID0gbmV3IFNlcnZlcihwb3J0OiA4MDgwKVxuI1xuIyBDcmVhdGUgZnJvbSBodHRwIHNlcnZlclxuIyAgICBzZXJ2ZXIgPSBuZXcgU2VydmVyKHNlcnZlcjogaHR0cFNlcnZlcilcblxuY2xhc3MgU2VydmVyXG4gIEBldmVudHMgPSBbXCJsaXN0ZW5pbmdcIiwgXCJjb25uZWN0aW9uXCIsIFwiZXJyb3JcIl1cbiAgXG4gIGNvbnN0cnVjdG9yOiAocGFyYW1zKSAtPlxuICAgIEBzaWduYWxzID0ge31cbiAgICBAY29uc3RydWN0b3IuZXZlbnRzLmZvckVhY2ggKG5hbWUpID0+XG4gICAgICBAc2lnbmFsc1tuYW1lXSA9IG5ldyBTaWduYWwoKVxuICAgIFxuICAgIEBzZXJ2ZXIgPSBXZWJTb2NrZXQuY3JlYXRlU2VydmVyIHBhcmFtcywgKHdzKSA9PlxuICAgICAgQHJlY2VpdmVDb25uZWN0aW9uKHdzKVxuICAgIFxuICAgIEBzZXJ2ZXIub24gXCJsaXN0ZW5pbmdcIiwgPT5cbiAgICAgIEBzaWduYWxzLmxpc3RlbmluZy5lbWl0IHRydWVcbiAgICBcbiAgICBAc2VydmVyLm9uIFwiZXJyb3JcIiwgKGVycikgPT5cbiAgICAgIEBzaWduYWxzLmVycm9yLmVtaXQgZXJyXG4gIFxuICBvbjogKG5hbWUsIGZuKSAtPlxuICAgIEBhZGRMaXN0ZW5lcihuYW1lLCBmbilcbiAgXG4gIGFkZExpc3RlbmVyOiAobmFtZSwgZm4pIC0+XG4gICAgQHNpZ25hbHNbbmFtZV0uYWRkTGlzdGVuZXIoZm4pXG4gIFxuICByZW1vdmVMaXN0ZW5lcjogKG5hbWUsIGZuKSAtPlxuICAgIEBzaWduYWxzW25hbWVdLnJlbW92ZUxpc3RlbmVyKGZuKVxuICBcbiAgcmVjZWl2ZUNvbm5lY3Rpb246ICh3cykgLT5cbiAgICB0cmFuc3BvcnQgPSBuZXcgU2VydmVyVHJhbnNwb3J0KHdzKVxuICAgIEBzaWduYWxzLmNvbm5lY3Rpb24uZW1pdCB0cmFuc3BvcnRcbiAgXG4gIGNsb3NlOiAtPlxuICAgIEBzZXJ2ZXIuY2xvc2UoKVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZlclxuIl19
