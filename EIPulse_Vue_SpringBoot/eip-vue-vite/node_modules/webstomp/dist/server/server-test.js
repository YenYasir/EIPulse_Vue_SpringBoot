(function() {
  var ClientTransport, Server, WebSocket, assert, bluebird, findOpenPort, portfinder;

  Server = require("./server");

  WebSocket = require("ws");

  ClientTransport = require("../client-transport");

  assert = require("assert");

  portfinder = require("portfinder");

  bluebird = require("bluebird");

  findOpenPort = bluebird.promisify(portfinder.getPort);

  describe("Server", function() {
    beforeEach(function() {
      return findOpenPort().then((function(_this) {
        return function(port) {
          return _this.port = port;
        };
      })(this));
    });
    it("should emit listening event", function(done) {
      var server;
      server = new Server({
        port: this.port
      });
      return server.on("listening", (function(_this) {
        return function() {
          server.close();
          return done();
        };
      })(this));
    });
    it("should emit errors", function(done) {
      var server1, server2;
      server1 = new Server({
        port: this.port
      });
      server2 = new Server({
        port: this.port
      });
      return server2.on("error", (function(_this) {
        return function(err) {
          assert.equal(err.code, "EADDRINUSE");
          server1.close();
          return done();
        };
      })(this));
    });
    return it("should emit transports", function(done) {
      var server, transport, ws;
      server = new Server({
        port: this.port
      });
      server.on("connection", function(transport) {
        return transport.on("frame", function(frame) {
          var response;
          assert.equal(frame.command, "CONNECT");
          response = {
            command: "CONNECTED",
            headers: {
              "version": "1.2"
            }
          };
          return transport.sendFrame(response)["catch"](done);
        });
      });
      ws = new WebSocket("ws://localhost:" + this.port);
      transport = new ClientTransport(ws);
      transport.on("open", function() {
        var request;
        request = {
          command: "CONNECT",
          headers: {
            "server": "test",
            "accept-version": "1.2"
          }
        };
        return transport.sendFrame(request)["catch"](done);
      });
      transport.on("frame", function(frame) {
        assert.equal(frame.command, "CONNECTED");
        return server.close();
      });
      transport.on("error", done);
      return transport.on("close", function() {
        return done();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci9zZXJ2ZXItdGVzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7RUFDVCxTQUFBLEdBQVksT0FBQSxDQUFRLElBQVI7O0VBQ1osZUFBQSxHQUFrQixPQUFBLENBQVEscUJBQVI7O0VBQ2xCLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7RUFDVCxVQUFBLEdBQWEsT0FBQSxDQUFRLFlBQVI7O0VBRWIsUUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztFQUNYLFlBQUEsR0FBZSxRQUFRLENBQUMsU0FBVCxDQUFtQixVQUFVLENBQUMsT0FBOUI7O0VBRWYsUUFBQSxDQUFTLFFBQVQsRUFBbUIsU0FBQTtJQUNqQixVQUFBLENBQVcsU0FBQTthQUNULFlBQUEsQ0FBQSxDQUFjLENBQUMsSUFBZixDQUFvQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsSUFBRDtpQkFDbEIsS0FBQyxDQUFBLElBQUQsR0FBUTtRQURVO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtJQURTLENBQVg7SUFJQSxFQUFBLENBQUcsNkJBQUgsRUFBa0MsU0FBQyxJQUFEO0FBQ2hDLFVBQUE7TUFBQSxNQUFBLEdBQWEsSUFBQSxNQUFBLENBQU87UUFBQSxJQUFBLEVBQU0sSUFBQyxDQUFBLElBQVA7T0FBUDthQUNiLE1BQU0sQ0FBQyxFQUFQLENBQVUsV0FBVixFQUF1QixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7VUFDckIsTUFBTSxDQUFDLEtBQVAsQ0FBQTtpQkFDQSxJQUFBLENBQUE7UUFGcUI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQXZCO0lBRmdDLENBQWxDO0lBTUEsRUFBQSxDQUFHLG9CQUFILEVBQXlCLFNBQUMsSUFBRDtBQUN2QixVQUFBO01BQUEsT0FBQSxHQUFjLElBQUEsTUFBQSxDQUFPO1FBQUEsSUFBQSxFQUFNLElBQUMsQ0FBQSxJQUFQO09BQVA7TUFDZCxPQUFBLEdBQWMsSUFBQSxNQUFBLENBQU87UUFBQSxJQUFBLEVBQU0sSUFBQyxDQUFBLElBQVA7T0FBUDthQUNkLE9BQU8sQ0FBQyxFQUFSLENBQVcsT0FBWCxFQUFvQixDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsR0FBRDtVQUNsQixNQUFNLENBQUMsS0FBUCxDQUFhLEdBQUcsQ0FBQyxJQUFqQixFQUF1QixZQUF2QjtVQUNBLE9BQU8sQ0FBQyxLQUFSLENBQUE7aUJBQ0EsSUFBQSxDQUFBO1FBSGtCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFwQjtJQUh1QixDQUF6QjtXQVFBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFDLElBQUQ7QUFDM0IsVUFBQTtNQUFBLE1BQUEsR0FBYSxJQUFBLE1BQUEsQ0FBTztRQUFBLElBQUEsRUFBTSxJQUFDLENBQUEsSUFBUDtPQUFQO01BRWIsTUFBTSxDQUFDLEVBQVAsQ0FBVSxZQUFWLEVBQXdCLFNBQUMsU0FBRDtlQUN0QixTQUFTLENBQUMsRUFBVixDQUFhLE9BQWIsRUFBc0IsU0FBQyxLQUFEO0FBQ3BCLGNBQUE7VUFBQSxNQUFNLENBQUMsS0FBUCxDQUFhLEtBQUssQ0FBQyxPQUFuQixFQUE0QixTQUE1QjtVQUNBLFFBQUEsR0FDRTtZQUFBLE9BQUEsRUFBUyxXQUFUO1lBQ0EsT0FBQSxFQUFTO2NBQUUsU0FBQSxFQUFXLEtBQWI7YUFEVDs7aUJBRUYsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsUUFBcEIsQ0FDRSxDQUFDLE9BQUQsQ0FERixDQUNTLElBRFQ7UUFMb0IsQ0FBdEI7TUFEc0IsQ0FBeEI7TUFTQSxFQUFBLEdBQVMsSUFBQSxTQUFBLENBQVUsaUJBQUEsR0FBbUIsSUFBQyxDQUFBLElBQTlCO01BQ1QsU0FBQSxHQUFnQixJQUFBLGVBQUEsQ0FBZ0IsRUFBaEI7TUFFaEIsU0FBUyxDQUFDLEVBQVYsQ0FBYSxNQUFiLEVBQXFCLFNBQUE7QUFDbkIsWUFBQTtRQUFBLE9BQUEsR0FDRTtVQUFBLE9BQUEsRUFBUyxTQUFUO1VBQ0EsT0FBQSxFQUFTO1lBQUUsUUFBQSxFQUFVLE1BQVo7WUFBb0IsZ0JBQUEsRUFBa0IsS0FBdEM7V0FEVDs7ZUFFRixTQUFTLENBQUMsU0FBVixDQUFvQixPQUFwQixDQUNFLENBQUMsT0FBRCxDQURGLENBQ1MsSUFEVDtNQUptQixDQUFyQjtNQU9BLFNBQVMsQ0FBQyxFQUFWLENBQWEsT0FBYixFQUFzQixTQUFDLEtBQUQ7UUFDcEIsTUFBTSxDQUFDLEtBQVAsQ0FBYSxLQUFLLENBQUMsT0FBbkIsRUFBNEIsV0FBNUI7ZUFDQSxNQUFNLENBQUMsS0FBUCxDQUFBO01BRm9CLENBQXRCO01BSUEsU0FBUyxDQUFDLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLElBQXRCO2FBRUEsU0FBUyxDQUFDLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLFNBQUE7ZUFDcEIsSUFBQSxDQUFBO01BRG9CLENBQXRCO0lBNUIyQixDQUE3QjtFQW5CaUIsQ0FBbkI7QUFUQSIsImZpbGUiOiJzZXJ2ZXIvc2VydmVyLXRlc3QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJTZXJ2ZXIgPSByZXF1aXJlIFwiLi9zZXJ2ZXJcIlxuV2ViU29ja2V0ID0gcmVxdWlyZSBcIndzXCJcbkNsaWVudFRyYW5zcG9ydCA9IHJlcXVpcmUgXCIuLi9jbGllbnQtdHJhbnNwb3J0XCJcbmFzc2VydCA9IHJlcXVpcmUgXCJhc3NlcnRcIlxucG9ydGZpbmRlciA9IHJlcXVpcmUgXCJwb3J0ZmluZGVyXCJcblxuYmx1ZWJpcmQgPSByZXF1aXJlIFwiYmx1ZWJpcmRcIlxuZmluZE9wZW5Qb3J0ID0gYmx1ZWJpcmQucHJvbWlzaWZ5KHBvcnRmaW5kZXIuZ2V0UG9ydClcblxuZGVzY3JpYmUgXCJTZXJ2ZXJcIiwgLT5cbiAgYmVmb3JlRWFjaCAtPlxuICAgIGZpbmRPcGVuUG9ydCgpLnRoZW4gKHBvcnQpID0+XG4gICAgICBAcG9ydCA9IHBvcnRcbiAgXG4gIGl0IFwic2hvdWxkIGVtaXQgbGlzdGVuaW5nIGV2ZW50XCIsIChkb25lKSAtPlxuICAgIHNlcnZlciA9IG5ldyBTZXJ2ZXIocG9ydDogQHBvcnQpXG4gICAgc2VydmVyLm9uIFwibGlzdGVuaW5nXCIsID0+XG4gICAgICBzZXJ2ZXIuY2xvc2UoKVxuICAgICAgZG9uZSgpXG4gIFxuICBpdCBcInNob3VsZCBlbWl0IGVycm9yc1wiLCAoZG9uZSkgLT5cbiAgICBzZXJ2ZXIxID0gbmV3IFNlcnZlcihwb3J0OiBAcG9ydClcbiAgICBzZXJ2ZXIyID0gbmV3IFNlcnZlcihwb3J0OiBAcG9ydClcbiAgICBzZXJ2ZXIyLm9uIFwiZXJyb3JcIiwgKGVycikgPT5cbiAgICAgIGFzc2VydC5lcXVhbCBlcnIuY29kZSwgXCJFQUREUklOVVNFXCJcbiAgICAgIHNlcnZlcjEuY2xvc2UoKVxuICAgICAgZG9uZSgpXG4gIFxuICBpdCBcInNob3VsZCBlbWl0IHRyYW5zcG9ydHNcIiwgKGRvbmUpIC0+XG4gICAgc2VydmVyID0gbmV3IFNlcnZlcihwb3J0OiBAcG9ydClcbiAgICBcbiAgICBzZXJ2ZXIub24gXCJjb25uZWN0aW9uXCIsICh0cmFuc3BvcnQpIC0+XG4gICAgICB0cmFuc3BvcnQub24gXCJmcmFtZVwiLCAoZnJhbWUpIC0+XG4gICAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5jb21tYW5kLCBcIkNPTk5FQ1RcIlxuICAgICAgICByZXNwb25zZSA9XG4gICAgICAgICAgY29tbWFuZDogXCJDT05ORUNURURcIlxuICAgICAgICAgIGhlYWRlcnM6IHsgXCJ2ZXJzaW9uXCI6IFwiMS4yXCIgfVxuICAgICAgICB0cmFuc3BvcnQuc2VuZEZyYW1lIHJlc3BvbnNlXG4gICAgICAgICAgLmNhdGNoIGRvbmVcbiAgICBcbiAgICB3cyA9IG5ldyBXZWJTb2NrZXQoXCJ3czovL2xvY2FsaG9zdDojeyBAcG9ydCB9XCIpXG4gICAgdHJhbnNwb3J0ID0gbmV3IENsaWVudFRyYW5zcG9ydCh3cylcbiAgICBcbiAgICB0cmFuc3BvcnQub24gXCJvcGVuXCIsIC0+ICAgICAgXG4gICAgICByZXF1ZXN0ID1cbiAgICAgICAgY29tbWFuZDogXCJDT05ORUNUXCJcbiAgICAgICAgaGVhZGVyczogeyBcInNlcnZlclwiOiBcInRlc3RcIiwgXCJhY2NlcHQtdmVyc2lvblwiOiBcIjEuMlwiIH1cbiAgICAgIHRyYW5zcG9ydC5zZW5kRnJhbWUgcmVxdWVzdFxuICAgICAgICAuY2F0Y2ggZG9uZVxuICAgIFxuICAgIHRyYW5zcG9ydC5vbiBcImZyYW1lXCIsIChmcmFtZSkgLT5cbiAgICAgIGFzc2VydC5lcXVhbCBmcmFtZS5jb21tYW5kLCBcIkNPTk5FQ1RFRFwiXG4gICAgICBzZXJ2ZXIuY2xvc2UoKVxuICAgIFxuICAgIHRyYW5zcG9ydC5vbiBcImVycm9yXCIsIGRvbmVcbiAgICBcbiAgICB0cmFuc3BvcnQub24gXCJjbG9zZVwiLCAtPlxuICAgICAgZG9uZSgpXG4iXX0=
