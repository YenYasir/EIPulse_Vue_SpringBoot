(function() {
  var Client, EventEmitter, Observable, Promise, identity, isString, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require("lodash"), isString = ref.isString, identity = ref.identity;

  EventEmitter = require("events");

  Promise = require("bluebird");

  Observable = require("zen-observable");

  Client = (function(superClass) {
    extend(Client, superClass);

    function Client(transport) {
      this.transport = transport;
      this.connection = null;
      this.heartbeat = "10000,0";
      this.receipts = {};
      this.subscriptions = {};
      this.receipt = 0;
      this.subscription = 0;
      this.disconnected = false;
      this.transport.on("frame", (function(_this) {
        return function(frame) {
          return _this.onFrame(frame);
        };
      })(this));
      this.transport.on("close", (function(_this) {
        return function() {
          return _this.emit("disconnected");
        };
      })(this));
    }

    Client.prototype.connect = function(headers) {
      var connected;
      if (!headers) {
        throw new Error("headers required");
      }
      if (!headers["accept-version"]) {
        throw new Error("accept-version header required");
      }
      if (!headers["host"]) {
        throw new Error("host header required");
      }
      if (headers["heart-beat"]) {
        this.heartbeat = headers["heart-beat"];
      } else {
        headers["heart-beat"] = this.heartbeat;
      }
      connected = new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.connection = {
            resolve: resolve,
            reject: reject
          };
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return _this.connection = null;
        };
      })(this));
      return this.sendFrame({
        command: "CONNECT",
        headers: headers
      }).tap((function(_this) {
        return function() {
          return connected;
        };
      })(this)).tap((function(_this) {
        return function() {
          return _this.emit("connected");
        };
      })(this));
    };

    Client.prototype.send = function(headers, body) {
      if (!headers) {
        throw new Error("headers required");
      }
      if (!headers["destination"]) {
        throw new Error("destination header required");
      }
      if (!isString(body)) {
        headers["content-type"] = "application/json";
        body = JSON.stringify(body);
      }
      if (!headers["receipt"]) {
        headers["receipt"] = "req-" + (this.receipt += 1);
      }
      return this.sendFrameWithReceipt({
        command: "SEND",
        headers: headers,
        body: body
      });
    };

    Client.prototype.source = function(headers) {
      return new Observable((function(_this) {
        return function(emitter) {
          _this.subscriptions[headers["id"]] = emitter;
          _this.subscribe(headers);
          return function() {
            return _this.unsubscribe(headers);
          };
        };
      })(this));
    };

    Client.prototype.subscribe = function(headers) {
      if (!headers) {
        throw new Error("headers required");
      }
      if (!headers["destination"]) {
        throw new Error("destination header required");
      }
      if (!headers["id"]) {
        headers["id"] = "S" + (this.subscription += 1);
      }
      return this.sendFrameWithReceipt({
        command: "SUBSCRIBE",
        headers: headers
      });
    };

    Client.prototype.unsubscribe = function(headers) {
      if (!headers) {
        throw new Error("headers required");
      }
      if (!headers["id"]) {
        throw new Error("id header required");
      }
      return this.sendFrameWithReceipt({
        command: "UNSUBSCRIBE",
        headers: headers
      }).tap((function(_this) {
        return function() {
          var id;
          id = headers["id"];
          if (_this.subscriptions[id]) {
            return delete _this.subscriptions[id];
          }
        };
      })(this));
    };

    Client.prototype.disconnect = function(headers) {
      var receipt;
      receipt = this.sendFrameWithReceipt({
        command: "DISCONNECT",
        headers: headers || {}
      });
      this.disconnected = true;
      return receipt["finally"]((function(_this) {
        return function() {
          return _this.transport.close();
        };
      })(this));
    };

    Client.prototype.onFrame = function(frame) {
      var body, command, headers;
      command = frame.command, headers = frame.headers, body = frame.body;
      switch (command) {
        case "CONNECTED":
          return this.onConnected(headers);
        case "RECEIPT":
          return this.onReceipt(headers);
        case "ERROR":
          return this.onError(headers);
        case "MESSAGE":
          return this.onMessage(headers, body);
      }
    };

    Client.prototype.onConnected = function(headers) {
      var heartbeat;
      if (heartbeat = headers["heart-beat"]) {
        this.autoHeartbeat(heartbeat);
      }
      if (this.connection) {
        return this.connection.resolve();
      }
    };

    Client.prototype.onReceipt = function(headers) {
      var receipt;
      if (receipt = this.receipts[headers["receipt-id"]]) {
        return receipt.resolve();
      }
    };

    Client.prototype.onError = function(headers) {
      var err, receipt;
      err = new Error(headers["message"]);
      if (this.connection) {
        this.connection.reject(err);
      }
      if (receipt = this.receipts[headers["receipt-id"]]) {
        return receipt.reject(err);
      }
    };

    Client.prototype.onMessage = function(headers, body) {
      var subscription;
      if (subscription = this.subscriptions[headers["subscription"]]) {
        return subscription.next(body);
      }
    };

    Client.prototype.sendFrameWithReceipt = function(frame) {
      var receipt, received;
      receipt = "R" + (this.receipt += 1);
      frame.headers["receipt"] = receipt;
      received = new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.receipts[receipt] = {
            resolve: resolve,
            reject: reject
          };
        };
      })(this))["finally"]((function(_this) {
        return function() {
          return delete _this.receipts[receipt];
        };
      })(this));
      return this.sendFrame(frame).tap((function(_this) {
        return function() {
          return received;
        };
      })(this));
    };

    Client.prototype.sendFrame = function(frame) {
      if (this.disconnected) {
        return Promise.reject(new Error("client disconnected"));
      } else {
        return this.transport.sendFrame(frame);
      }
    };

    Client.prototype.autoHeartbeat = function(header) {
      var cx, cy, frequency, ref1, ref2, sx, sy;
      ref1 = this.heartbeat.split(",").map(Number), cx = ref1[0], cy = ref1[1];
      ref2 = header.split(",").map(Number), sx = ref2[0], sy = ref2[1];
      if (cx > 0 && sy > 0) {
        frequency = Math.max(cx, sy);
        return this.transport.autoHeartbeat(frequency);
      }
    };

    return Client;

  })(EventEmitter);

  module.exports = Client;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
