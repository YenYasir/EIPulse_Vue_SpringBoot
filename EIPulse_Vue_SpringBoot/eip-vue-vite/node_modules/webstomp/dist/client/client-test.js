(function() {
  var Client, EventEmitter, assert, noop, ref, reject, resolve;

  assert = require("assert");

  EventEmitter = require("events");

  Client = require("./client");

  noop = require("lodash").noop;

  ref = require("bluebird"), resolve = ref.resolve, reject = ref.reject;

  describe("Client", function() {
    beforeEach(function() {
      this.transport = new EventEmitter();
      return this.client = new Client(this.transport);
    });
    describe("send frame", function() {
      it("should send to transport", function() {
        this.transport.sendFrame = function(frame) {
          assert(frame);
          return resolve();
        };
        return this.client.sendFrame({});
      });
      return it("should not send when disconnected", function() {
        this.client.disconnected = true;
        return this.client.sendFrame()["catch"](function(err) {
          return /disconnected/.test(err.message);
        });
      });
    });
    describe("auto heartbeat", function() {
      it("should not send if zero", function() {
        this.transport.autoHeartbeat = function() {
          throw new Error("invalid code path");
        };
        return this.client.autoHeartbeat("5000,0");
      });
      return it("should send heartbeat max", function() {
        this.transport.autoHeartbeat = function(ms) {
          return assert.equal(ms, 60000);
        };
        return this.client.autoHeartbeat("5000,60000");
      });
    });
    describe("send frame with receipt", function() {
      it("should generate unique id", function() {
        var receipts;
        receipts = [];
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            receipts.push(frame.headers["receipt"]);
            return resolve();
          };
        })(this);
        this.client.sendFrameWithReceipt({
          headers: {}
        });
        this.client.sendFrameWithReceipt({
          headers: {}
        });
        return assert.notEqual(receipts[0], receipts[1]);
      });
      it("should resolve when received", function() {
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            setImmediate(function() {
              var receipt;
              receipt = {
                command: "RECEIPT",
                headers: {
                  "receipt-id": frame.headers["receipt"]
                }
              };
              return _this.transport.emit("frame", receipt);
            });
            return resolve();
          };
        })(this);
        return this.client.sendFrameWithReceipt({
          headers: {}
        });
      });
      return it("should fail on server error", function() {
        var onSuccess;
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            setImmediate(function() {
              var error;
              error = {
                command: "ERROR",
                headers: {
                  "receipt-id": frame.headers["receipt"]
                }
              };
              return _this.transport.emit("frame", error);
            });
            return resolve();
          };
        })(this);
        onSuccess = function() {
          throw new Error("invalid code path");
        };
        return this.client.sendFrameWithReceipt({
          headers: {}
        }).then(onSuccess, noop);
      });
    });
    describe("connect", function() {
      it("should require headers", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.connect();
          };
        })(this)), /headers/);
      });
      it("should require accept version", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.connect({});
          };
        })(this)), /accept-version/);
      });
      it("should require host", function() {
        var headers;
        headers = {
          "accept-version": "1.2"
        };
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.connect(headers);
          };
        })(this)), /host/);
      });
      it("should send connect command", function() {
        this.transport.sendFrame = function(frame) {
          assert.equal(frame.command, "CONNECT");
          return resolve();
        };
        this.client.connect({
          "accept-version": "1.2",
          host: "localhost"
        });
        return null;
      });
      it("should add default heart-beat", function() {
        this.transport.sendFrame = function(frame) {
          assert.equal(frame.headers["heart-beat"], "10000,0");
          return resolve();
        };
        this.client.connect({
          "accept-version": "1.2",
          host: "localhost"
        });
        return null;
      });
      return it("should resolve when connected", function() {
        this.transport.sendFrame = (function(_this) {
          return function() {
            setImmediate(function() {
              var connected;
              connected = {
                command: "CONNECTED",
                headers: {}
              };
              return _this.transport.emit("frame", connected);
            });
            return resolve();
          };
        })(this);
        return this.client.connect({
          "accept-version": "1.2",
          host: "localhost"
        });
      });
    });
    describe("send", function() {
      it("should require headers", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.send();
          };
        })(this)), /headers/);
      });
      it("should require destination", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.send({});
          };
        })(this)), /destination/);
      });
      return it("should map to send command", function() {
        this.transport.sendFrame = function(frame) {
          assert.equal(frame.command, "SEND");
          return resolve();
        };
        this.client.send({
          destination: "/ottawa"
        });
        return null;
      });
    });
    describe("subscribe", function() {
      it("should require headers", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.subscribe();
          };
        })(this)), /headers/);
      });
      it("should require destination", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.subscribe({});
          };
        })(this)), /destination/);
      });
      it("should map to subscribe command", function() {
        this.transport.sendFrame = function(frame) {
          assert.equal(frame.command, "SUBSCRIBE");
          return resolve();
        };
        this.client.subscribe({
          id: "1",
          destination: "/toronto"
        });
        return null;
      });
      return it("should generate unique ids", function() {
        var ids;
        ids = [];
        this.transport.sendFrame = function(frame) {
          ids.push(frame.headers.id);
          return resolve();
        };
        this.client.subscribe({
          destination: "/peru"
        });
        this.client.subscribe({
          destination: "/iceland"
        });
        return assert.notEqual(ids[0], ids[1]);
      });
    });
    describe("unsubscribe", function() {
      it("should require headers", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.unsubscribe();
          };
        })(this)), /headers/);
      });
      it("should require id", function() {
        return assert.throws(((function(_this) {
          return function() {
            return _this.client.unsubscribe({});
          };
        })(this)), /id/);
      });
      return it("should map to unsubscribe command", function() {
        this.transport.sendFrame = function(frame) {
          assert.equal(frame.command, "UNSUBSCRIBE");
          return resolve();
        };
        this.client.unsubscribe({
          id: "sub-1"
        });
        return null;
      });
    });
    describe("source", function() {
      it("should subscribe and unsubscribe", function(done) {
        var commands, complete, source, sub;
        commands = [];
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            var receipt;
            commands.push(frame.command);
            receipt = {
              command: "RECEIPT",
              headers: {
                "receipt-id": frame.headers["receipt"]
              }
            };
            _this.transport.emit("frame", receipt);
            return resolve();
          };
        })(this);
        source = this.client.source({
          destination: "/paris"
        });
        complete = function() {
          assert.equal(commands[0], "SUBSCRIBE");
          assert.equal(commands[1], "UNSUBSCRIBE");
          return done();
        };
        sub = source.subscribe({
          next: noop,
          error: noop,
          complete: complete
        });
        setTimeout((function() {
          return sub.unsubscribe();
        }), 5);
        return setTimeout(complete, 5);
      });
      return it("should push frame body message", function(done) {
        var onMessage, source, sub;
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            var receipt;
            receipt = {
              command: "RECEIPT",
              headers: {
                "receipt-id": frame.headers["receipt"]
              }
            };
            _this.transport.emit("frame", receipt);
            return resolve();
          };
        })(this);
        source = this.client.source({
          destination: "/moscow",
          id: "S1"
        });
        sub = source.subscribe({
          next: function(message) {
            assert.equal(message, "ok");
            sub.unsubscribe();
            return done();
          }
        });
        onMessage = (function(_this) {
          return function() {
            var message;
            message = {
              command: "MESSAGE",
              headers: {
                subscription: "S1"
              },
              body: "ok"
            };
            return _this.transport.emit("frame", message);
          };
        })(this);
        return setTimeout(onMessage, 5);
      });
    });
    return describe("disconnect", function() {
      it("should close transport on receipt", function(done) {
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            var receipt;
            receipt = {
              command: "RECEIPT",
              headers: {
                "receipt-id": frame.headers["receipt"]
              }
            };
            _this.transport.emit("frame", receipt);
            return resolve();
          };
        })(this);
        this.transport.close = done;
        return this.client.disconnect();
      });
      return it("should close transport on error", function(done) {
        this.transport.sendFrame = (function(_this) {
          return function(frame) {
            var error;
            error = {
              command: "ERROR",
              headers: {
                "receipt-id": frame.headers["receipt"]
              }
            };
            _this.transport.emit("frame", error);
            return resolve();
          };
        })(this);
        this.transport.close = done;
        this.client.disconnect()["catch"](noop);
        return null;
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
