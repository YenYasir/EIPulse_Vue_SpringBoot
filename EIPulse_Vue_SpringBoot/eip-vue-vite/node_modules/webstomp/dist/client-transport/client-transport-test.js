(function() {
  var ClientTransport, EventEmitter, assert;

  EventEmitter = require("events");

  assert = require("assert");

  ClientTransport = require("./client-transport");

  describe("ClientTransport", function() {
    var assertCommand;
    beforeEach(function() {
      this.ws = new EventEmitter();
      return this.transport = new ClientTransport(this.ws);
    });
    assertCommand = function(command) {
      return function(message, fn) {
        var parsedCommand;
        parsedCommand = message.split(/\n/).shift();
        assert.equal(parsedCommand, command);
        return fn();
      };
    };
    describe("connect", function() {
      it("should map to connect frame", function() {
        this.ws.send = assertCommand("CONNECT");
        return this.transport.connect({
          "accept-version": "1.2",
          "host": "www.example.com"
        });
      });
      return it("should fail without accept version header", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.connected({});
          };
        })(this));
      });
    });
    describe("send", function() {
      it("should map to send frame", function() {
        this.ws.send = assertCommand("SEND");
        return this.transport.send({
          "destination": "/"
        });
      });
      return it("should have destination header", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.send({});
          };
        })(this));
      });
    });
    describe("subscribe", function() {
      it("should map to subscribe frame", function() {
        this.ws.send = assertCommand("SUBSCRIBE");
        return this.transport.subscribe({
          "destination": "/",
          "id": "sub-1"
        });
      });
      return it("should fail without id", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.subscripe({
              "destination": "/"
            });
          };
        })(this));
      });
    });
    describe("unsubscribe", function() {
      it("should map to unsubscribe frame", function() {
        this.ws.send = assertCommand("UNSUBSCRIBE");
        return this.transport.unsubscribe({
          "id": "sub-1"
        });
      });
      return it("should fail without id", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.unsubscribe({});
          };
        })(this));
      });
    });
    return describe("disconnect", function() {
      return it("should map to disconnect frame", function() {
        this.ws.send = assertCommand("DISCONNECT");
        return this.transport.disconnect();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC10cmFuc3BvcnQvY2xpZW50LXRyYW5zcG9ydC10ZXN0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsWUFBQSxHQUFlLE9BQUEsQ0FBUSxRQUFSOztFQUNmLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7RUFDVCxlQUFBLEdBQWtCLE9BQUEsQ0FBUSxvQkFBUjs7RUFFbEIsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFNBQUE7QUFDMUIsUUFBQTtJQUFBLFVBQUEsQ0FBVyxTQUFBO01BQ1QsSUFBQyxDQUFBLEVBQUQsR0FBVSxJQUFBLFlBQUEsQ0FBQTthQUNWLElBQUMsQ0FBQSxTQUFELEdBQWlCLElBQUEsZUFBQSxDQUFnQixJQUFDLENBQUEsRUFBakI7SUFGUixDQUFYO0lBSUEsYUFBQSxHQUFnQixTQUFDLE9BQUQ7YUFDZCxTQUFDLE9BQUQsRUFBVSxFQUFWO0FBQ0UsWUFBQTtRQUFBLGFBQUEsR0FBZ0IsT0FBTyxDQUFDLEtBQVIsQ0FBYyxJQUFkLENBQW1CLENBQUMsS0FBcEIsQ0FBQTtRQUNoQixNQUFNLENBQUMsS0FBUCxDQUFhLGFBQWIsRUFBNEIsT0FBNUI7ZUFDQSxFQUFBLENBQUE7TUFIRjtJQURjO0lBTWhCLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7TUFDbEIsRUFBQSxDQUFHLDZCQUFILEVBQWtDLFNBQUE7UUFDaEMsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLFNBQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLE9BQVgsQ0FDRTtVQUFBLGdCQUFBLEVBQWtCLEtBQWxCO1VBQ0EsTUFBQSxFQUFRLGlCQURSO1NBREY7TUFGZ0MsQ0FBbEM7YUFNQSxFQUFBLENBQUcsMkNBQUgsRUFBZ0QsU0FBQTtlQUM5QyxNQUFNLENBQUMsTUFBUCxDQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ1osS0FBQyxDQUFBLFNBQVMsQ0FBQyxTQUFYLENBQXFCLEVBQXJCO1VBRFk7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7TUFEOEMsQ0FBaEQ7SUFQa0IsQ0FBcEI7SUFXQSxRQUFBLENBQVMsTUFBVCxFQUFpQixTQUFBO01BQ2YsRUFBQSxDQUFHLDBCQUFILEVBQStCLFNBQUE7UUFDN0IsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLE1BQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLElBQVgsQ0FDRTtVQUFBLGFBQUEsRUFBZSxHQUFmO1NBREY7TUFGNkIsQ0FBL0I7YUFLQSxFQUFBLENBQUcsZ0NBQUgsRUFBcUMsU0FBQTtlQUNuQyxNQUFNLENBQUMsTUFBUCxDQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ1osS0FBQyxDQUFBLFNBQVMsQ0FBQyxJQUFYLENBQWdCLEVBQWhCO1VBRFk7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7TUFEbUMsQ0FBckM7SUFOZSxDQUFqQjtJQVVBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUE7TUFDcEIsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUE7UUFDbEMsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLFdBQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLFNBQVgsQ0FDRTtVQUFBLGFBQUEsRUFBZSxHQUFmO1VBQ0EsSUFBQSxFQUFNLE9BRE47U0FERjtNQUZrQyxDQUFwQzthQU1BLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFBO2VBQzNCLE1BQU0sQ0FBQyxNQUFQLENBQWMsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQTttQkFDWixLQUFDLENBQUEsU0FBUyxDQUFDLFNBQVgsQ0FBcUI7Y0FBRSxhQUFBLEVBQWUsR0FBakI7YUFBckI7VUFEWTtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZDtNQUQyQixDQUE3QjtJQVBvQixDQUF0QjtJQVdBLFFBQUEsQ0FBUyxhQUFULEVBQXdCLFNBQUE7TUFDdEIsRUFBQSxDQUFHLGlDQUFILEVBQXNDLFNBQUE7UUFDcEMsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLGFBQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLFdBQVgsQ0FDRTtVQUFBLElBQUEsRUFBTSxPQUFOO1NBREY7TUFGb0MsQ0FBdEM7YUFLQSxFQUFBLENBQUcsd0JBQUgsRUFBNkIsU0FBQTtlQUMzQixNQUFNLENBQUMsTUFBUCxDQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ1osS0FBQyxDQUFBLFNBQVMsQ0FBQyxXQUFYLENBQXVCLEVBQXZCO1VBRFk7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7TUFEMkIsQ0FBN0I7SUFOc0IsQ0FBeEI7V0FVQSxRQUFBLENBQVMsWUFBVCxFQUF1QixTQUFBO2FBQ3JCLEVBQUEsQ0FBRyxnQ0FBSCxFQUFxQyxTQUFBO1FBQ25DLElBQUMsQ0FBQSxFQUFFLENBQUMsSUFBSixHQUFXLGFBQUEsQ0FBYyxZQUFkO2VBQ1gsSUFBQyxDQUFBLFNBQVMsQ0FBQyxVQUFYLENBQUE7TUFGbUMsQ0FBckM7SUFEcUIsQ0FBdkI7RUFyRDBCLENBQTVCO0FBSkEiLCJmaWxlIjoiY2xpZW50LXRyYW5zcG9ydC9jbGllbnQtdHJhbnNwb3J0LXRlc3QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJFdmVudEVtaXR0ZXIgPSByZXF1aXJlIFwiZXZlbnRzXCJcbmFzc2VydCA9IHJlcXVpcmUgXCJhc3NlcnRcIlxuQ2xpZW50VHJhbnNwb3J0ID0gcmVxdWlyZSBcIi4vY2xpZW50LXRyYW5zcG9ydFwiXG5cbmRlc2NyaWJlIFwiQ2xpZW50VHJhbnNwb3J0XCIsIC0+XG4gIGJlZm9yZUVhY2ggLT5cbiAgICBAd3MgPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICBAdHJhbnNwb3J0ID0gbmV3IENsaWVudFRyYW5zcG9ydChAd3MpXG5cbiAgYXNzZXJ0Q29tbWFuZCA9IChjb21tYW5kKSAtPlxuICAgIChtZXNzYWdlLCBmbikgLT5cbiAgICAgIHBhcnNlZENvbW1hbmQgPSBtZXNzYWdlLnNwbGl0KC9cXG4vKS5zaGlmdCgpXG4gICAgICBhc3NlcnQuZXF1YWwgcGFyc2VkQ29tbWFuZCwgY29tbWFuZFxuICAgICAgZm4oKVxuXG4gIGRlc2NyaWJlIFwiY29ubmVjdFwiLCAtPlxuICAgIGl0IFwic2hvdWxkIG1hcCB0byBjb25uZWN0IGZyYW1lXCIsIC0+XG4gICAgICBAd3Muc2VuZCA9IGFzc2VydENvbW1hbmQgXCJDT05ORUNUXCJcbiAgICAgIEB0cmFuc3BvcnQuY29ubmVjdFxuICAgICAgICBcImFjY2VwdC12ZXJzaW9uXCI6IFwiMS4yXCJcbiAgICAgICAgXCJob3N0XCI6IFwid3d3LmV4YW1wbGUuY29tXCJcblxuICAgIGl0IFwic2hvdWxkIGZhaWwgd2l0aG91dCBhY2NlcHQgdmVyc2lvbiBoZWFkZXJcIiwgLT5cbiAgICAgIGFzc2VydC50aHJvd3MgPT5cbiAgICAgICAgQHRyYW5zcG9ydC5jb25uZWN0ZWQge31cblxuICBkZXNjcmliZSBcInNlbmRcIiwgLT5cbiAgICBpdCBcInNob3VsZCBtYXAgdG8gc2VuZCBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiU0VORFwiXG4gICAgICBAdHJhbnNwb3J0LnNlbmRcbiAgICAgICAgXCJkZXN0aW5hdGlvblwiOiBcIi9cIlxuXG4gICAgaXQgXCJzaG91bGQgaGF2ZSBkZXN0aW5hdGlvbiBoZWFkZXJcIiwgLT5cbiAgICAgIGFzc2VydC50aHJvd3MgPT5cbiAgICAgICAgQHRyYW5zcG9ydC5zZW5kIHt9XG5cbiAgZGVzY3JpYmUgXCJzdWJzY3JpYmVcIiwgLT5cbiAgICBpdCBcInNob3VsZCBtYXAgdG8gc3Vic2NyaWJlIGZyYW1lXCIsIC0+XG4gICAgICBAd3Muc2VuZCA9IGFzc2VydENvbW1hbmQgXCJTVUJTQ1JJQkVcIlxuICAgICAgQHRyYW5zcG9ydC5zdWJzY3JpYmVcbiAgICAgICAgXCJkZXN0aW5hdGlvblwiOiBcIi9cIlxuICAgICAgICBcImlkXCI6IFwic3ViLTFcIlxuXG4gICAgaXQgXCJzaG91bGQgZmFpbCB3aXRob3V0IGlkXCIsIC0+XG4gICAgICBhc3NlcnQudGhyb3dzID0+XG4gICAgICAgIEB0cmFuc3BvcnQuc3Vic2NyaXBlIHsgXCJkZXN0aW5hdGlvblwiOiBcIi9cIiB9XG5cbiAgZGVzY3JpYmUgXCJ1bnN1YnNjcmliZVwiLCAtPlxuICAgIGl0IFwic2hvdWxkIG1hcCB0byB1bnN1YnNjcmliZSBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiVU5TVUJTQ1JJQkVcIlxuICAgICAgQHRyYW5zcG9ydC51bnN1YnNjcmliZVxuICAgICAgICBcImlkXCI6IFwic3ViLTFcIlxuXG4gICAgaXQgXCJzaG91bGQgZmFpbCB3aXRob3V0IGlkXCIsIC0+XG4gICAgICBhc3NlcnQudGhyb3dzID0+XG4gICAgICAgIEB0cmFuc3BvcnQudW5zdWJzY3JpYmUge31cblxuICBkZXNjcmliZSBcImRpc2Nvbm5lY3RcIiwgLT5cbiAgICBpdCBcInNob3VsZCBtYXAgdG8gZGlzY29ubmVjdCBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiRElTQ09OTkVDVFwiXG4gICAgICBAdHJhbnNwb3J0LmRpc2Nvbm5lY3QoKVxuIl19
