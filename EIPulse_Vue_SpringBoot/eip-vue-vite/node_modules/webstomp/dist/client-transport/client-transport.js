(function() {
  var ClientTransport, Transport, assertHeaders,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transport = require("../transport");

  ClientTransport = (function(superClass) {
    extend(ClientTransport, superClass);

    function ClientTransport() {
      return ClientTransport.__super__.constructor.apply(this, arguments);
    }

    ClientTransport.prototype.connect = function(headers) {
      assertHeaders(headers, ["accept-version", "host"]);
      return this.sendFrame({
        command: "CONNECT",
        headers: headers
      });
    };

    ClientTransport.prototype.stomp = function(headers) {
      return this.connect(headers);
    };

    ClientTransport.prototype.send = function(headers, body) {
      assertHeaders(headers, ["destination"]);
      return this.sendFrame({
        command: "SEND",
        headers: headers,
        body: body
      });
    };

    ClientTransport.prototype.subscribe = function(headers) {
      assertHeaders(headers, ["destination", "id"]);
      return this.sendFrame({
        command: "SUBSCRIBE",
        headers: headers
      });
    };

    ClientTransport.prototype.unsubscribe = function(headers) {
      assertHeaders(headers, ["id"]);
      return this.sendFrame({
        command: "UNSUBSCRIBE",
        headers: headers
      });
    };

    ClientTransport.prototype.disconnect = function(headers) {
      return this.sendFrame({
        command: "DISCONNECT",
        headers: headers
      });
    };

    return ClientTransport;

  })(Transport);

  assertHeaders = function(headers, names) {
    var i, len, name, results;
    if (!headers) {
      throw new Error("headers required");
    }
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      if (!headers[name]) {
        throw new Error(name + " header required");
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  module.exports = ClientTransport;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNsaWVudC10cmFuc3BvcnQvY2xpZW50LXRyYW5zcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLHlDQUFBO0lBQUE7OztFQUFBLFNBQUEsR0FBWSxPQUFBLENBQVEsY0FBUjs7RUFFTjs7Ozs7Ozs4QkFDSixPQUFBLEdBQVMsU0FBQyxPQUFEO01BQ1AsYUFBQSxDQUFjLE9BQWQsRUFBdUIsQ0FBRSxnQkFBRixFQUFvQixNQUFwQixDQUF2QjthQUNBLElBQUMsQ0FBQSxTQUFELENBQ0U7UUFBQSxPQUFBLEVBQVMsU0FBVDtRQUNBLE9BQUEsRUFBUyxPQURUO09BREY7SUFGTzs7OEJBTVQsS0FBQSxHQUFPLFNBQUMsT0FBRDthQUNMLElBQUMsQ0FBQSxPQUFELENBQVMsT0FBVDtJQURLOzs4QkFHUCxJQUFBLEdBQU0sU0FBQyxPQUFELEVBQVUsSUFBVjtNQUNKLGFBQUEsQ0FBYyxPQUFkLEVBQXVCLENBQUUsYUFBRixDQUF2QjthQUNBLElBQUMsQ0FBQSxTQUFELENBQ0U7UUFBQSxPQUFBLEVBQVMsTUFBVDtRQUNBLE9BQUEsRUFBUyxPQURUO1FBRUEsSUFBQSxFQUFNLElBRk47T0FERjtJQUZJOzs4QkFPTixTQUFBLEdBQVcsU0FBQyxPQUFEO01BQ1QsYUFBQSxDQUFjLE9BQWQsRUFBdUIsQ0FBRSxhQUFGLEVBQWlCLElBQWpCLENBQXZCO2FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FDRTtRQUFBLE9BQUEsRUFBUyxXQUFUO1FBQ0EsT0FBQSxFQUFTLE9BRFQ7T0FERjtJQUZTOzs4QkFNWCxXQUFBLEdBQWEsU0FBQyxPQUFEO01BQ1gsYUFBQSxDQUFjLE9BQWQsRUFBdUIsQ0FBRSxJQUFGLENBQXZCO2FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FDRTtRQUFBLE9BQUEsRUFBUyxhQUFUO1FBQ0EsT0FBQSxFQUFTLE9BRFQ7T0FERjtJQUZXOzs4QkFNYixVQUFBLEdBQVksU0FBQyxPQUFEO2FBQ1YsSUFBQyxDQUFBLFNBQUQsQ0FDRTtRQUFBLE9BQUEsRUFBUyxZQUFUO1FBQ0EsT0FBQSxFQUFTLE9BRFQ7T0FERjtJQURVOzs7O0tBN0JnQjs7RUFtQzlCLGFBQUEsR0FBZ0IsU0FBQyxPQUFELEVBQVUsS0FBVjtBQUNkLFFBQUE7SUFBQSxJQUFBLENBQU8sT0FBUDtBQUNFLFlBQVUsSUFBQSxLQUFBLENBQU0sa0JBQU4sRUFEWjs7QUFFQTtTQUFBLHVDQUFBOztNQUNFLElBQUEsQ0FBTyxPQUFRLENBQUEsSUFBQSxDQUFmO0FBQ0UsY0FBVSxJQUFBLEtBQUEsQ0FBUyxJQUFELEdBQU0sa0JBQWQsRUFEWjtPQUFBLE1BQUE7NkJBQUE7O0FBREY7O0VBSGM7O0VBUWhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBN0NqQiIsImZpbGUiOiJjbGllbnQtdHJhbnNwb3J0L2NsaWVudC10cmFuc3BvcnQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJUcmFuc3BvcnQgPSByZXF1aXJlIFwiLi4vdHJhbnNwb3J0XCJcblxuY2xhc3MgQ2xpZW50VHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0XG4gIGNvbm5lY3Q6IChoZWFkZXJzKSAtPlxuICAgIGFzc2VydEhlYWRlcnMgaGVhZGVycywgWyBcImFjY2VwdC12ZXJzaW9uXCIsIFwiaG9zdFwiIF1cbiAgICBAc2VuZEZyYW1lXG4gICAgICBjb21tYW5kOiBcIkNPTk5FQ1RcIlxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuXG4gIHN0b21wOiAoaGVhZGVycykgLT5cbiAgICBAY29ubmVjdCBoZWFkZXJzXG5cbiAgc2VuZDogKGhlYWRlcnMsIGJvZHkpIC0+XG4gICAgYXNzZXJ0SGVhZGVycyBoZWFkZXJzLCBbIFwiZGVzdGluYXRpb25cIiBdXG4gICAgQHNlbmRGcmFtZVxuICAgICAgY29tbWFuZDogXCJTRU5EXCJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICAgIGJvZHk6IGJvZHlcblxuICBzdWJzY3JpYmU6IChoZWFkZXJzKSAtPlxuICAgIGFzc2VydEhlYWRlcnMgaGVhZGVycywgWyBcImRlc3RpbmF0aW9uXCIsIFwiaWRcIiBdXG4gICAgQHNlbmRGcmFtZVxuICAgICAgY29tbWFuZDogXCJTVUJTQ1JJQkVcIlxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuXG4gIHVuc3Vic2NyaWJlOiAoaGVhZGVycykgLT5cbiAgICBhc3NlcnRIZWFkZXJzIGhlYWRlcnMsIFsgXCJpZFwiIF1cbiAgICBAc2VuZEZyYW1lXG4gICAgICBjb21tYW5kOiBcIlVOU1VCU0NSSUJFXCJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnNcblxuICBkaXNjb25uZWN0OiAoaGVhZGVycykgLT5cbiAgICBAc2VuZEZyYW1lXG4gICAgICBjb21tYW5kOiBcIkRJU0NPTk5FQ1RcIlxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuXG5cbmFzc2VydEhlYWRlcnMgPSAoaGVhZGVycywgbmFtZXMpIC0+XG4gIHVubGVzcyBoZWFkZXJzXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaGVhZGVycyByZXF1aXJlZFwiKVxuICBmb3IgbmFtZSBpbiBuYW1lc1xuICAgIHVubGVzcyBoZWFkZXJzW25hbWVdXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCIje25hbWV9IGhlYWRlciByZXF1aXJlZFwiKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50VHJhbnNwb3J0XG4iXX0=
