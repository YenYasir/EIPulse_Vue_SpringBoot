(function() {
  var Router, async, commands, pathToRegexp, withCommand, withPath;

  pathToRegexp = require("path-to-regexp");

  async = require("async");

  commands = ["connect", "send", "subscribe", "unsubscribe", "disconnect"];

  Router = (function() {
    Router.commands = commands;

    function Router() {
      this.routes = [];
    }

    Router.prototype.dispatch = function(context, next) {
      var iterator;
      iterator = function(route, next) {
        return route.call(context, next);
      };
      return async.eachSeries(this.routes, iterator, next);
    };

    Router.prototype.use = function(path, fn) {
      var route;
      if (!(path && fn)) {
        fn || (fn = path);
        path = null;
      }
      route = (function() {
        switch (false) {
          case !(fn instanceof Router):
            return function(next) {
              return fn.dispatch(this, next);
            };
          case !path:
            return withPath(path, fn);
          default:
            return fn;
        }
      })();
      return this.routes.push(route);
    };

    return Router;

  })();

  Router.commands.forEach(function(command) {
    return Router.prototype[command] = function(path, fn) {
      if (!(path && fn)) {
        fn || (fn = path);
        path = null;
      }
      return this.use(path, withCommand(command.toUpperCase(), fn));
    };
  });

  withPath = function(path, fn) {
    var emitter, keys, re;
    keys = [];
    re = pathToRegexp(path, keys);
    emitter = this;
    return function(next) {
      var match, params;
      params = {};
      path = this.headers["destination"];
      if (!path) {
        return next();
      }
      match = re.exec(path);
      if (!match) {
        return next();
      }
      keys.forEach(function(key, i) {
        return params[key.name] = match[i + 1];
      });
      this.params = params;
      return fn.call(this, next);
    };
  };

  withCommand = function(command, fn) {
    return function(next) {
      if (this.command === command) {
        return fn.call(this, next);
      } else {
        return next();
      }
    };
  };

  module.exports = Router;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7RUFBQSxZQUFBLEdBQWUsT0FBQSxDQUFRLGdCQUFSOztFQUNmLEtBQUEsR0FBUSxPQUFBLENBQVEsT0FBUjs7RUFFUixRQUFBLEdBQVcsQ0FDVCxTQURTLEVBRVQsTUFGUyxFQUdULFdBSFMsRUFJVCxhQUpTLEVBS1QsWUFMUzs7RUFRTDtJQUNKLE1BQUMsQ0FBQSxRQUFELEdBQVk7O0lBRUMsZ0JBQUE7TUFDWCxJQUFDLENBQUEsTUFBRCxHQUFVO0lBREM7O3FCQUdiLFFBQUEsR0FBVSxTQUFDLE9BQUQsRUFBVSxJQUFWO0FBQ1IsVUFBQTtNQUFBLFFBQUEsR0FBVyxTQUFDLEtBQUQsRUFBUSxJQUFSO2VBQ1QsS0FBSyxDQUFDLElBQU4sQ0FBVyxPQUFYLEVBQW9CLElBQXBCO01BRFM7YUFFWCxLQUFLLENBQUMsVUFBTixDQUFpQixJQUFDLENBQUEsTUFBbEIsRUFBMEIsUUFBMUIsRUFBb0MsSUFBcEM7SUFIUTs7cUJBS1YsR0FBQSxHQUFLLFNBQUMsSUFBRCxFQUFPLEVBQVA7QUFDSCxVQUFBO01BQUEsSUFBQSxDQUFBLENBQU8sSUFBQSxJQUFRLEVBQWYsQ0FBQTtRQUNFLE9BQUEsS0FBTztRQUNQLElBQUEsR0FBTyxLQUZUOztNQUdBLEtBQUE7QUFBUSxnQkFBQSxLQUFBO0FBQUEsaUJBQ0QsRUFBQSxZQUFjLE9BRGI7bUJBRUosU0FBQyxJQUFEO3FCQUNFLEVBQUUsQ0FBQyxRQUFILENBQVksSUFBWixFQUFrQixJQUFsQjtZQURGO0FBRkksZ0JBSUQsSUFKQzttQkFLSixRQUFBLENBQVMsSUFBVCxFQUFlLEVBQWY7QUFMSTttQkFPSjtBQVBJOzthQVFSLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixDQUFhLEtBQWI7SUFaRzs7Ozs7O0VBY1AsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFoQixDQUF3QixTQUFDLE9BQUQ7V0FDdEIsTUFBTSxDQUFDLFNBQVUsQ0FBQSxPQUFBLENBQWpCLEdBQTRCLFNBQUMsSUFBRCxFQUFPLEVBQVA7TUFDMUIsSUFBQSxDQUFBLENBQU8sSUFBQSxJQUFRLEVBQWYsQ0FBQTtRQUNFLE9BQUEsS0FBTztRQUNQLElBQUEsR0FBTyxLQUZUOzthQUdBLElBQUMsQ0FBQSxHQUFELENBQUssSUFBTCxFQUFXLFdBQUEsQ0FBWSxPQUFPLENBQUMsV0FBUixDQUFBLENBQVosRUFBbUMsRUFBbkMsQ0FBWDtJQUowQjtFQUROLENBQXhCOztFQU9BLFFBQUEsR0FBVyxTQUFDLElBQUQsRUFBTyxFQUFQO0FBRVQsUUFBQTtJQUFBLElBQUEsR0FBTztJQUNQLEVBQUEsR0FBSyxZQUFBLENBQWEsSUFBYixFQUFtQixJQUFuQjtJQUNMLE9BQUEsR0FBVTtBQUdWLFdBQU8sU0FBQyxJQUFEO0FBQ0wsVUFBQTtNQUFBLE1BQUEsR0FBUztNQUdULElBQUEsR0FBTyxJQUFDLENBQUEsT0FBUSxDQUFBLGFBQUE7TUFDaEIsSUFBQSxDQUFxQixJQUFyQjtBQUFBLGVBQU8sSUFBQSxDQUFBLEVBQVA7O01BR0EsS0FBQSxHQUFRLEVBQUUsQ0FBQyxJQUFILENBQVEsSUFBUjtNQUNSLElBQUEsQ0FBcUIsS0FBckI7QUFBQSxlQUFPLElBQUEsQ0FBQSxFQUFQOztNQUdBLElBQUksQ0FBQyxPQUFMLENBQWEsU0FBQyxHQUFELEVBQU0sQ0FBTjtlQUNYLE1BQU8sQ0FBQSxHQUFHLENBQUMsSUFBSixDQUFQLEdBQW1CLEtBQU0sQ0FBQSxDQUFBLEdBQUksQ0FBSjtNQURkLENBQWI7TUFFQSxJQUFDLENBQUEsTUFBRCxHQUFVO2FBR1YsRUFBRSxDQUFDLElBQUgsQ0FBUSxJQUFSLEVBQWMsSUFBZDtJQWpCSztFQVBFOztFQTBCWCxXQUFBLEdBQWMsU0FBQyxPQUFELEVBQVUsRUFBVjtBQUNaLFdBQU8sU0FBQyxJQUFEO01BQ0wsSUFBRyxJQUFDLENBQUEsT0FBRCxLQUFZLE9BQWY7ZUFDRSxFQUFFLENBQUMsSUFBSCxDQUFRLElBQVIsRUFBYyxJQUFkLEVBREY7T0FBQSxNQUFBO2VBR0UsSUFBQSxDQUFBLEVBSEY7O0lBREs7RUFESzs7RUFPZCxNQUFNLENBQUMsT0FBUCxHQUFpQjtBQTVFakIiLCJmaWxlIjoicm91dGVyL3JvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbInBhdGhUb1JlZ2V4cCA9IHJlcXVpcmUgXCJwYXRoLXRvLXJlZ2V4cFwiXG5hc3luYyA9IHJlcXVpcmUgXCJhc3luY1wiXG5cbmNvbW1hbmRzID0gW1xuICBcImNvbm5lY3RcIlxuICBcInNlbmRcIlxuICBcInN1YnNjcmliZVwiXG4gIFwidW5zdWJzY3JpYmVcIlxuICBcImRpc2Nvbm5lY3RcIlxuXVxuXG5jbGFzcyBSb3V0ZXJcbiAgQGNvbW1hbmRzID0gY29tbWFuZHNcbiAgXG4gIGNvbnN0cnVjdG9yOiAtPlxuICAgIEByb3V0ZXMgPSBbXVxuICBcbiAgZGlzcGF0Y2g6IChjb250ZXh0LCBuZXh0KSAtPlxuICAgIGl0ZXJhdG9yID0gKHJvdXRlLCBuZXh0KSAtPlxuICAgICAgcm91dGUuY2FsbChjb250ZXh0LCBuZXh0KVxuICAgIGFzeW5jLmVhY2hTZXJpZXMgQHJvdXRlcywgaXRlcmF0b3IsIG5leHRcbiAgXG4gIHVzZTogKHBhdGgsIGZuKSAtPlxuICAgIHVubGVzcyBwYXRoICYmIGZuXG4gICAgICBmbiB8fD0gcGF0aFxuICAgICAgcGF0aCA9IG51bGxcbiAgICByb3V0ZSA9IHN3aXRjaFxuICAgICAgd2hlbiBmbiBpbnN0YW5jZW9mIFJvdXRlclxuICAgICAgICAobmV4dCkgLT5cbiAgICAgICAgICBmbi5kaXNwYXRjaCh0aGlzLCBuZXh0KVxuICAgICAgd2hlbiBwYXRoXG4gICAgICAgIHdpdGhQYXRoKHBhdGgsIGZuKVxuICAgICAgZWxzZVxuICAgICAgICBmblxuICAgIEByb3V0ZXMucHVzaCByb3V0ZVxuXG5Sb3V0ZXIuY29tbWFuZHMuZm9yRWFjaCAoY29tbWFuZCkgLT5cbiAgUm91dGVyLnByb3RvdHlwZVtjb21tYW5kXSA9IChwYXRoLCBmbikgLT5cbiAgICB1bmxlc3MgcGF0aCAmJiBmblxuICAgICAgZm4gfHw9IHBhdGhcbiAgICAgIHBhdGggPSBudWxsXG4gICAgQHVzZSBwYXRoLCB3aXRoQ29tbWFuZChjb21tYW5kLnRvVXBwZXJDYXNlKCksIGZuKVxuXG53aXRoUGF0aCA9IChwYXRoLCBmbikgLT5cbiAgIyBwYXJzZSBwYXRoIHJlZ2V4cFxuICBrZXlzID0gW11cbiAgcmUgPSBwYXRoVG9SZWdleHAgcGF0aCwga2V5c1xuICBlbWl0dGVyID0gdGhpc1xuICBcbiAgIyBjaGVjayBwYXRoIGFuZCBwb3B1bGF0ZSBwYXJhbXNcbiAgcmV0dXJuIChuZXh0KSAtPlxuICAgIHBhcmFtcyA9IHt9XG4gICAgXG4gICAgIyBleGl0IGlmIHdyb25nIHR5cGUgb2YgY29tbWFuZFxuICAgIHBhdGggPSBAaGVhZGVyc1tcImRlc3RpbmF0aW9uXCJdXG4gICAgcmV0dXJuIG5leHQoKSB1bmxlc3MgcGF0aFxuICAgIFxuICAgICMgRWFybHkgZXhpdCBpZiB3cm9uZyBwYXRoXG4gICAgbWF0Y2ggPSByZS5leGVjIHBhdGhcbiAgICByZXR1cm4gbmV4dCgpIHVubGVzcyBtYXRjaFxuICAgIFxuICAgICMgR2V0IHJvdXRlIHBhcmFtc1xuICAgIGtleXMuZm9yRWFjaCAoa2V5LCBpKSAtPlxuICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IG1hdGNoW2kgKyAxXVxuICAgIEBwYXJhbXMgPSBwYXJhbXNcbiAgICBcbiAgICAjIHByb3h5IGZ1bmMgZmluYWxseVxuICAgIGZuLmNhbGwodGhpcywgbmV4dClcblxud2l0aENvbW1hbmQgPSAoY29tbWFuZCwgZm4pIC0+XG4gIHJldHVybiAobmV4dCkgLT5cbiAgICBpZiBAY29tbWFuZCA9PSBjb21tYW5kXG4gICAgICBmbi5jYWxsKHRoaXMsIG5leHQpXG4gICAgZWxzZVxuICAgICAgbmV4dCgpXG5cbm1vZHVsZS5leHBvcnRzID0gUm91dGVyXG4iXX0=
