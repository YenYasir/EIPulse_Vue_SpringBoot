(function() {
  var Router, assert;

  Router = require("./router");

  assert = require("assert");

  describe("Router", function() {
    beforeEach(function() {
      return this.router = new Router();
    });
    it("should dispatch routes in series", function(done) {
      this.router.use(function(next) {
        this.ok = true;
        return next();
      });
      this.router.use(function(next) {
        assert(this.ok);
        return next();
      });
      return this.router.dispatch({}, done);
    });
    it("should match on path", function(done) {
      this.router.use("/some/path", function(next) {
        return assert.fail();
      });
      return this.router.dispatch({
        headers: {}
      }, done);
    });
    it("should add path params", function(done) {
      var headers;
      this.router.use("/users/:id", function(next) {
        assert.equal(this.params.id, "5");
        return next();
      });
      headers = {
        "destination": "/users/5"
      };
      return this.router.dispatch({
        headers: headers
      }, done);
    });
    it("should match on command", function(done) {
      var context;
      this.router.subscribe(function(next) {
        return assert.fail("invalid path");
      });
      this.router.connect(function(next) {
        this.state.ok = true;
        return next();
      });
      this.router.use(function(next) {
        assert(this.state.ok);
        return next();
      });
      context = {
        command: "CONNECT",
        headers: {},
        state: {}
      };
      return this.router.dispatch(context, done);
    });
    it("should match on command and path", function(done) {
      var context;
      this.router.subscribe("/message", function(next) {
        return assert.fail();
      });
      this.router.send("/message", function(next) {
        this.state.ok = true;
        return next();
      });
      this.router.use(function(next) {
        assert(this.state.ok);
        return next();
      });
      context = {
        command: "SEND",
        headers: {
          "destination": "/message"
        },
        state: {}
      };
      return this.router.dispatch(context, done);
    });
    return it("should mount routers", function(done) {
      var subrouter;
      subrouter = new Router();
      subrouter.use(function(next) {
        this.ok = true;
        return next();
      });
      this.router.use(subrouter);
      this.router.use(function(next) {
        assert(this.ok);
        return next();
      });
      return this.router.dispatch({}, done);
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlci9yb3V0ZXItdGVzdC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLE1BQUEsR0FBUyxPQUFBLENBQVEsVUFBUjs7RUFDVCxNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0VBRVQsUUFBQSxDQUFTLFFBQVQsRUFBbUIsU0FBQTtJQUNqQixVQUFBLENBQVcsU0FBQTthQUNULElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxNQUFBLENBQUE7SUFETCxDQUFYO0lBR0EsRUFBQSxDQUFHLGtDQUFILEVBQXVDLFNBQUMsSUFBRDtNQUNyQyxJQUFDLENBQUEsTUFBTSxDQUFDLEdBQVIsQ0FBWSxTQUFDLElBQUQ7UUFDVixJQUFDLENBQUEsRUFBRCxHQUFNO2VBQ04sSUFBQSxDQUFBO01BRlUsQ0FBWjtNQUdBLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLFNBQUMsSUFBRDtRQUNWLE1BQUEsQ0FBTyxJQUFDLENBQUEsRUFBUjtlQUNBLElBQUEsQ0FBQTtNQUZVLENBQVo7YUFHQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUIsRUFBakIsRUFBcUIsSUFBckI7SUFQcUMsQ0FBdkM7SUFTQSxFQUFBLENBQUcsc0JBQUgsRUFBMkIsU0FBQyxJQUFEO01BQ3pCLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLFlBQVosRUFBMEIsU0FBQyxJQUFEO2VBQ3hCLE1BQU0sQ0FBQyxJQUFQLENBQUE7TUFEd0IsQ0FBMUI7YUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUI7UUFBRSxPQUFBLEVBQVMsRUFBWDtPQUFqQixFQUFrQyxJQUFsQztJQUh5QixDQUEzQjtJQUtBLEVBQUEsQ0FBRyx3QkFBSCxFQUE2QixTQUFDLElBQUQ7QUFDM0IsVUFBQTtNQUFBLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLFlBQVosRUFBMEIsU0FBQyxJQUFEO1FBQ3hCLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxFQUFyQixFQUF5QixHQUF6QjtlQUNBLElBQUEsQ0FBQTtNQUZ3QixDQUExQjtNQUdBLE9BQUEsR0FBVTtRQUFFLGFBQUEsRUFBZSxVQUFqQjs7YUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUI7UUFBRSxTQUFBLE9BQUY7T0FBakIsRUFBOEIsSUFBOUI7SUFMMkIsQ0FBN0I7SUFPQSxFQUFBLENBQUcseUJBQUgsRUFBOEIsU0FBQyxJQUFEO0FBQzVCLFVBQUE7TUFBQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsQ0FBa0IsU0FBQyxJQUFEO2VBQ2hCLE1BQU0sQ0FBQyxJQUFQLENBQVksY0FBWjtNQURnQixDQUFsQjtNQUdBLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixDQUFnQixTQUFDLElBQUQ7UUFDZCxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQVAsR0FBWTtlQUNaLElBQUEsQ0FBQTtNQUZjLENBQWhCO01BSUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksU0FBQyxJQUFEO1FBQ1YsTUFBQSxDQUFPLElBQUMsQ0FBQSxLQUFLLENBQUMsRUFBZDtlQUNBLElBQUEsQ0FBQTtNQUZVLENBQVo7TUFJQSxPQUFBLEdBQ0U7UUFBQSxPQUFBLEVBQVMsU0FBVDtRQUNBLE9BQUEsRUFBUyxFQURUO1FBRUEsS0FBQSxFQUFPLEVBRlA7O2FBSUYsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFSLENBQWlCLE9BQWpCLEVBQTBCLElBQTFCO0lBakI0QixDQUE5QjtJQW1CQSxFQUFBLENBQUcsa0NBQUgsRUFBdUMsU0FBQyxJQUFEO0FBQ3JDLFVBQUE7TUFBQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsQ0FBa0IsVUFBbEIsRUFBOEIsU0FBQyxJQUFEO2VBQzVCLE1BQU0sQ0FBQyxJQUFQLENBQUE7TUFENEIsQ0FBOUI7TUFHQSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBYSxVQUFiLEVBQXlCLFNBQUMsSUFBRDtRQUN2QixJQUFDLENBQUEsS0FBSyxDQUFDLEVBQVAsR0FBWTtlQUNaLElBQUEsQ0FBQTtNQUZ1QixDQUF6QjtNQUlBLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLFNBQUMsSUFBRDtRQUNWLE1BQUEsQ0FBTyxJQUFDLENBQUEsS0FBSyxDQUFDLEVBQWQ7ZUFDQSxJQUFBLENBQUE7TUFGVSxDQUFaO01BSUEsT0FBQSxHQUNFO1FBQUEsT0FBQSxFQUFTLE1BQVQ7UUFDQSxPQUFBLEVBQVM7VUFBRSxhQUFBLEVBQWUsVUFBakI7U0FEVDtRQUVBLEtBQUEsRUFBTyxFQUZQOzthQUlGLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixDQUFpQixPQUFqQixFQUEwQixJQUExQjtJQWpCcUMsQ0FBdkM7V0FtQkEsRUFBQSxDQUFHLHNCQUFILEVBQTJCLFNBQUMsSUFBRDtBQUN6QixVQUFBO01BQUEsU0FBQSxHQUFnQixJQUFBLE1BQUEsQ0FBQTtNQUNoQixTQUFTLENBQUMsR0FBVixDQUFjLFNBQUMsSUFBRDtRQUNaLElBQUMsQ0FBQSxFQUFELEdBQU07ZUFDTixJQUFBLENBQUE7TUFGWSxDQUFkO01BSUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxHQUFSLENBQVksU0FBWjtNQUVBLElBQUMsQ0FBQSxNQUFNLENBQUMsR0FBUixDQUFZLFNBQUMsSUFBRDtRQUNWLE1BQUEsQ0FBTyxJQUFDLENBQUEsRUFBUjtlQUNBLElBQUEsQ0FBQTtNQUZVLENBQVo7YUFJQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUIsRUFBakIsRUFBcUIsSUFBckI7SUFaeUIsQ0FBM0I7RUEvRGlCLENBQW5CO0FBSEEiLCJmaWxlIjoicm91dGVyL3JvdXRlci10ZXN0LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiUm91dGVyID0gcmVxdWlyZSBcIi4vcm91dGVyXCJcbmFzc2VydCA9IHJlcXVpcmUgXCJhc3NlcnRcIlxuXG5kZXNjcmliZSBcIlJvdXRlclwiLCAtPlxuICBiZWZvcmVFYWNoIC0+XG4gICAgQHJvdXRlciA9IG5ldyBSb3V0ZXIoKVxuXG4gIGl0IFwic2hvdWxkIGRpc3BhdGNoIHJvdXRlcyBpbiBzZXJpZXNcIiwgKGRvbmUpIC0+XG4gICAgQHJvdXRlci51c2UgKG5leHQpIC0+XG4gICAgICBAb2sgPSB0cnVlXG4gICAgICBuZXh0KClcbiAgICBAcm91dGVyLnVzZSAobmV4dCkgLT5cbiAgICAgIGFzc2VydCBAb2tcbiAgICAgIG5leHQoKVxuICAgIEByb3V0ZXIuZGlzcGF0Y2goe30sIGRvbmUpXG4gIFxuICBpdCBcInNob3VsZCBtYXRjaCBvbiBwYXRoXCIsIChkb25lKSAtPlxuICAgIEByb3V0ZXIudXNlIFwiL3NvbWUvcGF0aFwiLCAobmV4dCkgLT5cbiAgICAgIGFzc2VydC5mYWlsKClcbiAgICBAcm91dGVyLmRpc3BhdGNoKHsgaGVhZGVyczoge30gfSwgZG9uZSlcblxuICBpdCBcInNob3VsZCBhZGQgcGF0aCBwYXJhbXNcIiwgKGRvbmUpIC0+XG4gICAgQHJvdXRlci51c2UgXCIvdXNlcnMvOmlkXCIsIChuZXh0KSAtPlxuICAgICAgYXNzZXJ0LmVxdWFsIEBwYXJhbXMuaWQsIFwiNVwiXG4gICAgICBuZXh0KClcbiAgICBoZWFkZXJzID0geyBcImRlc3RpbmF0aW9uXCI6IFwiL3VzZXJzLzVcIiB9XG4gICAgQHJvdXRlci5kaXNwYXRjaCh7IGhlYWRlcnMgfSwgZG9uZSlcblxuICBpdCBcInNob3VsZCBtYXRjaCBvbiBjb21tYW5kXCIsIChkb25lKSAtPlxuICAgIEByb3V0ZXIuc3Vic2NyaWJlIChuZXh0KSAtPlxuICAgICAgYXNzZXJ0LmZhaWwoXCJpbnZhbGlkIHBhdGhcIilcbiAgICBcbiAgICBAcm91dGVyLmNvbm5lY3QgKG5leHQpIC0+XG4gICAgICBAc3RhdGUub2sgPSB0cnVlXG4gICAgICBuZXh0KClcbiAgICBcbiAgICBAcm91dGVyLnVzZSAobmV4dCkgLT5cbiAgICAgIGFzc2VydCBAc3RhdGUub2tcbiAgICAgIG5leHQoKVxuICAgIFxuICAgIGNvbnRleHQgPSBcbiAgICAgIGNvbW1hbmQ6IFwiQ09OTkVDVFwiXG4gICAgICBoZWFkZXJzOiB7fVxuICAgICAgc3RhdGU6IHt9XG4gICAgXG4gICAgQHJvdXRlci5kaXNwYXRjaChjb250ZXh0LCBkb25lKVxuXG4gIGl0IFwic2hvdWxkIG1hdGNoIG9uIGNvbW1hbmQgYW5kIHBhdGhcIiwgKGRvbmUpIC0+XG4gICAgQHJvdXRlci5zdWJzY3JpYmUgXCIvbWVzc2FnZVwiLCAobmV4dCkgLT5cbiAgICAgIGFzc2VydC5mYWlsKClcbiAgICAgIFxuICAgIEByb3V0ZXIuc2VuZCBcIi9tZXNzYWdlXCIsIChuZXh0KSAtPlxuICAgICAgQHN0YXRlLm9rID0gdHJ1ZVxuICAgICAgbmV4dCgpXG4gICAgXG4gICAgQHJvdXRlci51c2UgKG5leHQpIC0+XG4gICAgICBhc3NlcnQgQHN0YXRlLm9rXG4gICAgICBuZXh0KClcbiAgICAgIFxuICAgIGNvbnRleHQgPVxuICAgICAgY29tbWFuZDogXCJTRU5EXCJcbiAgICAgIGhlYWRlcnM6IHsgXCJkZXN0aW5hdGlvblwiOiBcIi9tZXNzYWdlXCIgfVxuICAgICAgc3RhdGU6IHt9XG4gICAgXG4gICAgQHJvdXRlci5kaXNwYXRjaChjb250ZXh0LCBkb25lKVxuXG4gIGl0IFwic2hvdWxkIG1vdW50IHJvdXRlcnNcIiwgKGRvbmUpIC0+XG4gICAgc3Vicm91dGVyID0gbmV3IFJvdXRlcigpXG4gICAgc3Vicm91dGVyLnVzZSAobmV4dCkgLT5cbiAgICAgIEBvayA9IHRydWVcbiAgICAgIG5leHQoKVxuICAgIFxuICAgIEByb3V0ZXIudXNlIHN1YnJvdXRlclxuICAgIFxuICAgIEByb3V0ZXIudXNlIChuZXh0KSAtPlxuICAgICAgYXNzZXJ0IEBva1xuICAgICAgbmV4dCgpXG4gICAgXG4gICAgQHJvdXRlci5kaXNwYXRjaCh7fSwgZG9uZSlcblxuIl19
