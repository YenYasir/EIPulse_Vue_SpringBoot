(function() {
  var ServerTransport, Transport, assertHeaders,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Transport = require("../transport");

  ServerTransport = (function(superClass) {
    extend(ServerTransport, superClass);

    function ServerTransport() {
      return ServerTransport.__super__.constructor.apply(this, arguments);
    }

    ServerTransport.prototype.connected = function(headers) {
      assertHeaders(headers, ["version"]);
      return this.sendFrame({
        command: "CONNECTED",
        headers: headers
      });
    };

    ServerTransport.prototype.message = function(headers, body) {
      assertHeaders(headers, ["destination", "subscription", "message-id"]);
      return this.sendFrame({
        command: "MESSAGE",
        headers: headers,
        body: body
      });
    };

    ServerTransport.prototype.receipt = function(headers) {
      assertHeaders(headers, ["receipt-id"]);
      return this.sendFrame({
        command: "RECEIPT",
        headers: headers
      });
    };

    ServerTransport.prototype.error = function(headers, body) {
      assertHeaders(headers, ["message"]);
      return this.sendFrame({
        command: "ERROR",
        headers: headers,
        body: body
      });
    };

    return ServerTransport;

  })(Transport);

  assertHeaders = function(headers, names) {
    var i, len, name, results;
    if (!headers) {
      throw new Error("headers required");
    }
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      if (!headers[name]) {
        throw new Error(name + " header required");
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  module.exports = ServerTransport;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci10cmFuc3BvcnQvc2VydmVyLXRyYW5zcG9ydC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBLHlDQUFBO0lBQUE7OztFQUFBLFNBQUEsR0FBWSxPQUFBLENBQVEsY0FBUjs7RUFFTjs7Ozs7Ozs4QkFDSixTQUFBLEdBQVcsU0FBQyxPQUFEO01BQ1QsYUFBQSxDQUFjLE9BQWQsRUFBdUIsQ0FBRSxTQUFGLENBQXZCO2FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FDRTtRQUFBLE9BQUEsRUFBUyxXQUFUO1FBQ0EsT0FBQSxFQUFTLE9BRFQ7T0FERjtJQUZTOzs4QkFNWCxPQUFBLEdBQVMsU0FBQyxPQUFELEVBQVUsSUFBVjtNQUNQLGFBQUEsQ0FBYyxPQUFkLEVBQXVCLENBQUUsYUFBRixFQUFpQixjQUFqQixFQUFpQyxZQUFqQyxDQUF2QjthQUNBLElBQUMsQ0FBQSxTQUFELENBQ0U7UUFBQSxPQUFBLEVBQVMsU0FBVDtRQUNBLE9BQUEsRUFBUyxPQURUO1FBRUEsSUFBQSxFQUFNLElBRk47T0FERjtJQUZPOzs4QkFPVCxPQUFBLEdBQVMsU0FBQyxPQUFEO01BQ1AsYUFBQSxDQUFjLE9BQWQsRUFBdUIsQ0FBRSxZQUFGLENBQXZCO2FBQ0EsSUFBQyxDQUFBLFNBQUQsQ0FDRTtRQUFBLE9BQUEsRUFBUyxTQUFUO1FBQ0EsT0FBQSxFQUFTLE9BRFQ7T0FERjtJQUZPOzs4QkFNVCxLQUFBLEdBQU8sU0FBQyxPQUFELEVBQVUsSUFBVjtNQUNMLGFBQUEsQ0FBYyxPQUFkLEVBQXVCLENBQUUsU0FBRixDQUF2QjthQUNBLElBQUMsQ0FBQSxTQUFELENBQ0U7UUFBQSxPQUFBLEVBQVMsT0FBVDtRQUNBLE9BQUEsRUFBUyxPQURUO1FBRUEsSUFBQSxFQUFNLElBRk47T0FERjtJQUZLOzs7O0tBcEJxQjs7RUE0QjlCLGFBQUEsR0FBZ0IsU0FBQyxPQUFELEVBQVUsS0FBVjtBQUNkLFFBQUE7SUFBQSxJQUFBLENBQU8sT0FBUDtBQUNFLFlBQVUsSUFBQSxLQUFBLENBQU0sa0JBQU4sRUFEWjs7QUFFQTtTQUFBLHVDQUFBOztNQUNFLElBQUEsQ0FBTyxPQUFRLENBQUEsSUFBQSxDQUFmO0FBQ0UsY0FBVSxJQUFBLEtBQUEsQ0FBUyxJQUFELEdBQU0sa0JBQWQsRUFEWjtPQUFBLE1BQUE7NkJBQUE7O0FBREY7O0VBSGM7O0VBUWhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCO0FBdENqQiIsImZpbGUiOiJzZXJ2ZXItdHJhbnNwb3J0L3NlcnZlci10cmFuc3BvcnQuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJUcmFuc3BvcnQgPSByZXF1aXJlIFwiLi4vdHJhbnNwb3J0XCJcblxuY2xhc3MgU2VydmVyVHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0XG4gIGNvbm5lY3RlZDogKGhlYWRlcnMpIC0+XG4gICAgYXNzZXJ0SGVhZGVycyBoZWFkZXJzLCBbIFwidmVyc2lvblwiIF1cbiAgICBAc2VuZEZyYW1lXG4gICAgICBjb21tYW5kOiBcIkNPTk5FQ1RFRFwiXG4gICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gIFxuICBtZXNzYWdlOiAoaGVhZGVycywgYm9keSkgLT5cbiAgICBhc3NlcnRIZWFkZXJzIGhlYWRlcnMsIFsgXCJkZXN0aW5hdGlvblwiLCBcInN1YnNjcmlwdGlvblwiLCBcIm1lc3NhZ2UtaWRcIiBdXG4gICAgQHNlbmRGcmFtZVxuICAgICAgY29tbWFuZDogXCJNRVNTQUdFXCJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgICAgIGJvZHk6IGJvZHlcbiAgXG4gIHJlY2VpcHQ6IChoZWFkZXJzKSAtPlxuICAgIGFzc2VydEhlYWRlcnMgaGVhZGVycywgWyBcInJlY2VpcHQtaWRcIiBdXG4gICAgQHNlbmRGcmFtZVxuICAgICAgY29tbWFuZDogXCJSRUNFSVBUXCJcbiAgICAgIGhlYWRlcnM6IGhlYWRlcnNcbiAgXG4gIGVycm9yOiAoaGVhZGVycywgYm9keSkgLT5cbiAgICBhc3NlcnRIZWFkZXJzIGhlYWRlcnMsIFsgXCJtZXNzYWdlXCIgXVxuICAgIEBzZW5kRnJhbWVcbiAgICAgIGNvbW1hbmQ6IFwiRVJST1JcIlxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgICAgYm9keTogYm9keVxuXG5cbmFzc2VydEhlYWRlcnMgPSAoaGVhZGVycywgbmFtZXMpIC0+XG4gIHVubGVzcyBoZWFkZXJzXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaGVhZGVycyByZXF1aXJlZFwiKVxuICBmb3IgbmFtZSBpbiBuYW1lc1xuICAgIHVubGVzcyBoZWFkZXJzW25hbWVdXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCIje25hbWV9IGhlYWRlciByZXF1aXJlZFwiKVxuXG5cbm1vZHVsZS5leHBvcnRzID0gU2VydmVyVHJhbnNwb3J0XG4iXX0=
