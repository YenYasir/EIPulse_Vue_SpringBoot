(function() {
  var EventEmitter, ServerTransport, assert;

  EventEmitter = require("events");

  ServerTransport = require("./server-transport");

  assert = require("assert");

  describe("ServerTransport", function() {
    var assertCommand;
    beforeEach(function() {
      this.ws = new EventEmitter();
      return this.transport = new ServerTransport(this.ws);
    });
    assertCommand = function(command) {
      return function(message, fn) {
        var parsedCommand;
        parsedCommand = message.split(/\n/).shift();
        assert.equal(parsedCommand, command);
        return fn();
      };
    };
    describe("connected", function() {
      it("should map to connected frame", function() {
        this.ws.send = assertCommand("CONNECTED");
        return this.transport.connected({
          "version": "1.2"
        });
      });
      return it("should fail without version header", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.connected({});
          };
        })(this));
      });
    });
    describe("message", function() {
      it("should map to message frame", function() {
        this.ws.send = assertCommand("MESSAGE");
        return this.transport.message({
          "destination": "/",
          "subscription": "abc",
          "message-id": "M1-1"
        });
      });
      return it("should have message id header", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.message({
              "destination": "/",
              "subscription": "abc"
            });
          };
        })(this));
      });
    });
    describe("receipt", function() {
      it("should map to receipt frame", function() {
        this.ws.send = assertCommand("RECEIPT");
        return this.transport.receipt({
          "receipt-id": "123"
        });
      });
      return it("should fail without receipt id", function() {
        return assert.throws((function(_this) {
          return function() {
            return _this.transport.receipt({});
          };
        })(this));
      });
    });
    return describe("error", function() {
      it("should map to error frame", function() {
        this.ws.send = assertCommand("ERROR");
        return this.transport.error({
          "message": "too much risk"
        });
      });
      return it("should fail without message header", function() {
        return assert.throws(function() {
          return this.transport.error({});
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci10cmFuc3BvcnQvc2VydmVyLXRyYW5zcG9ydC10ZXN0LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsWUFBQSxHQUFlLE9BQUEsQ0FBUSxRQUFSOztFQUNmLGVBQUEsR0FBa0IsT0FBQSxDQUFRLG9CQUFSOztFQUNsQixNQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0VBRVQsUUFBQSxDQUFTLGlCQUFULEVBQTRCLFNBQUE7QUFDMUIsUUFBQTtJQUFBLFVBQUEsQ0FBVyxTQUFBO01BQ1QsSUFBQyxDQUFBLEVBQUQsR0FBVSxJQUFBLFlBQUEsQ0FBQTthQUNWLElBQUMsQ0FBQSxTQUFELEdBQWlCLElBQUEsZUFBQSxDQUFnQixJQUFDLENBQUEsRUFBakI7SUFGUixDQUFYO0lBSUEsYUFBQSxHQUFnQixTQUFDLE9BQUQ7YUFDZCxTQUFDLE9BQUQsRUFBVSxFQUFWO0FBQ0UsWUFBQTtRQUFBLGFBQUEsR0FBZ0IsT0FBTyxDQUFDLEtBQVIsQ0FBYyxJQUFkLENBQW1CLENBQUMsS0FBcEIsQ0FBQTtRQUNoQixNQUFNLENBQUMsS0FBUCxDQUFhLGFBQWIsRUFBNEIsT0FBNUI7ZUFDQSxFQUFBLENBQUE7TUFIRjtJQURjO0lBTWhCLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUE7TUFDcEIsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUE7UUFDbEMsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLFdBQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLFNBQVgsQ0FDRTtVQUFBLFNBQUEsRUFBVyxLQUFYO1NBREY7TUFGa0MsQ0FBcEM7YUFLQSxFQUFBLENBQUcsb0NBQUgsRUFBeUMsU0FBQTtlQUN2QyxNQUFNLENBQUMsTUFBUCxDQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ1osS0FBQyxDQUFBLFNBQVMsQ0FBQyxTQUFYLENBQXFCLEVBQXJCO1VBRFk7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7TUFEdUMsQ0FBekM7SUFOb0IsQ0FBdEI7SUFVQSxRQUFBLENBQVMsU0FBVCxFQUFvQixTQUFBO01BQ2xCLEVBQUEsQ0FBRyw2QkFBSCxFQUFrQyxTQUFBO1FBQ2hDLElBQUMsQ0FBQSxFQUFFLENBQUMsSUFBSixHQUFXLGFBQUEsQ0FBYyxTQUFkO2VBQ1gsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQ0U7VUFBQSxhQUFBLEVBQWUsR0FBZjtVQUNBLGNBQUEsRUFBZ0IsS0FEaEI7VUFFQSxZQUFBLEVBQWMsTUFGZDtTQURGO01BRmdDLENBQWxDO2FBT0EsRUFBQSxDQUFHLCtCQUFILEVBQW9DLFNBQUE7ZUFDbEMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFBO21CQUNaLEtBQUMsQ0FBQSxTQUFTLENBQUMsT0FBWCxDQUNFO2NBQUEsYUFBQSxFQUFlLEdBQWY7Y0FDQSxjQUFBLEVBQWdCLEtBRGhCO2FBREY7VUFEWTtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZDtNQURrQyxDQUFwQztJQVJrQixDQUFwQjtJQWNBLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7TUFDbEIsRUFBQSxDQUFHLDZCQUFILEVBQWtDLFNBQUE7UUFDaEMsSUFBQyxDQUFBLEVBQUUsQ0FBQyxJQUFKLEdBQVcsYUFBQSxDQUFjLFNBQWQ7ZUFDWCxJQUFDLENBQUEsU0FBUyxDQUFDLE9BQVgsQ0FDRTtVQUFBLFlBQUEsRUFBYyxLQUFkO1NBREY7TUFGZ0MsQ0FBbEM7YUFLQSxFQUFBLENBQUcsZ0NBQUgsRUFBcUMsU0FBQTtlQUNuQyxNQUFNLENBQUMsTUFBUCxDQUFjLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUE7bUJBQ1osS0FBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQW1CLEVBQW5CO1VBRFk7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWQ7TUFEbUMsQ0FBckM7SUFOa0IsQ0FBcEI7V0FVQSxRQUFBLENBQVMsT0FBVCxFQUFrQixTQUFBO01BQ2hCLEVBQUEsQ0FBRywyQkFBSCxFQUFnQyxTQUFBO1FBQzlCLElBQUMsQ0FBQSxFQUFFLENBQUMsSUFBSixHQUFXLGFBQUEsQ0FBYyxPQUFkO2VBQ1gsSUFBQyxDQUFBLFNBQVMsQ0FBQyxLQUFYLENBQ0U7VUFBQSxTQUFBLEVBQVcsZUFBWDtTQURGO01BRjhCLENBQWhDO2FBS0EsRUFBQSxDQUFHLG9DQUFILEVBQXlDLFNBQUE7ZUFDdkMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxTQUFBO2lCQUNaLElBQUMsQ0FBQSxTQUFTLENBQUMsS0FBWCxDQUFpQixFQUFqQjtRQURZLENBQWQ7TUFEdUMsQ0FBekM7SUFOZ0IsQ0FBbEI7RUE3QzBCLENBQTVCO0FBSkEiLCJmaWxlIjoic2VydmVyLXRyYW5zcG9ydC9zZXJ2ZXItdHJhbnNwb3J0LXRlc3QuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJFdmVudEVtaXR0ZXIgPSByZXF1aXJlIFwiZXZlbnRzXCJcblNlcnZlclRyYW5zcG9ydCA9IHJlcXVpcmUgXCIuL3NlcnZlci10cmFuc3BvcnRcIlxuYXNzZXJ0ID0gcmVxdWlyZSBcImFzc2VydFwiXG5cbmRlc2NyaWJlIFwiU2VydmVyVHJhbnNwb3J0XCIsIC0+XG4gIGJlZm9yZUVhY2ggLT5cbiAgICBAd3MgPSBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICBAdHJhbnNwb3J0ID0gbmV3IFNlcnZlclRyYW5zcG9ydChAd3MpXG5cbiAgYXNzZXJ0Q29tbWFuZCA9IChjb21tYW5kKSAtPlxuICAgIChtZXNzYWdlLCBmbikgLT5cbiAgICAgIHBhcnNlZENvbW1hbmQgPSBtZXNzYWdlLnNwbGl0KC9cXG4vKS5zaGlmdCgpXG4gICAgICBhc3NlcnQuZXF1YWwgcGFyc2VkQ29tbWFuZCwgY29tbWFuZFxuICAgICAgZm4oKVxuXG4gIGRlc2NyaWJlIFwiY29ubmVjdGVkXCIsIC0+XG4gICAgaXQgXCJzaG91bGQgbWFwIHRvIGNvbm5lY3RlZCBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiQ09OTkVDVEVEXCJcbiAgICAgIEB0cmFuc3BvcnQuY29ubmVjdGVkXG4gICAgICAgIFwidmVyc2lvblwiOiBcIjEuMlwiXG5cbiAgICBpdCBcInNob3VsZCBmYWlsIHdpdGhvdXQgdmVyc2lvbiBoZWFkZXJcIiwgLT5cbiAgICAgIGFzc2VydC50aHJvd3MgPT5cbiAgICAgICAgQHRyYW5zcG9ydC5jb25uZWN0ZWQge31cblxuICBkZXNjcmliZSBcIm1lc3NhZ2VcIiwgLT5cbiAgICBpdCBcInNob3VsZCBtYXAgdG8gbWVzc2FnZSBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiTUVTU0FHRVwiXG4gICAgICBAdHJhbnNwb3J0Lm1lc3NhZ2VcbiAgICAgICAgXCJkZXN0aW5hdGlvblwiOiBcIi9cIlxuICAgICAgICBcInN1YnNjcmlwdGlvblwiOiBcImFiY1wiXG4gICAgICAgIFwibWVzc2FnZS1pZFwiOiBcIk0xLTFcIlxuXG4gICAgaXQgXCJzaG91bGQgaGF2ZSBtZXNzYWdlIGlkIGhlYWRlclwiLCAtPlxuICAgICAgYXNzZXJ0LnRocm93cyA9PlxuICAgICAgICBAdHJhbnNwb3J0Lm1lc3NhZ2VcbiAgICAgICAgICBcImRlc3RpbmF0aW9uXCI6IFwiL1wiXG4gICAgICAgICAgXCJzdWJzY3JpcHRpb25cIjogXCJhYmNcIlxuXG4gIGRlc2NyaWJlIFwicmVjZWlwdFwiLCAtPlxuICAgIGl0IFwic2hvdWxkIG1hcCB0byByZWNlaXB0IGZyYW1lXCIsIC0+XG4gICAgICBAd3Muc2VuZCA9IGFzc2VydENvbW1hbmQgXCJSRUNFSVBUXCJcbiAgICAgIEB0cmFuc3BvcnQucmVjZWlwdFxuICAgICAgICBcInJlY2VpcHQtaWRcIjogXCIxMjNcIlxuXG4gICAgaXQgXCJzaG91bGQgZmFpbCB3aXRob3V0IHJlY2VpcHQgaWRcIiwgLT5cbiAgICAgIGFzc2VydC50aHJvd3MgPT5cbiAgICAgICAgQHRyYW5zcG9ydC5yZWNlaXB0IHt9XG5cbiAgZGVzY3JpYmUgXCJlcnJvclwiLCAtPlxuICAgIGl0IFwic2hvdWxkIG1hcCB0byBlcnJvciBmcmFtZVwiLCAtPlxuICAgICAgQHdzLnNlbmQgPSBhc3NlcnRDb21tYW5kIFwiRVJST1JcIlxuICAgICAgQHRyYW5zcG9ydC5lcnJvclxuICAgICAgICBcIm1lc3NhZ2VcIjogXCJ0b28gbXVjaCByaXNrXCJcblxuICAgIGl0IFwic2hvdWxkIGZhaWwgd2l0aG91dCBtZXNzYWdlIGhlYWRlclwiLCAtPlxuICAgICAgYXNzZXJ0LnRocm93cyAtPlxuICAgICAgICBAdHJhbnNwb3J0LmVycm9yIHt9XG4iXX0=
