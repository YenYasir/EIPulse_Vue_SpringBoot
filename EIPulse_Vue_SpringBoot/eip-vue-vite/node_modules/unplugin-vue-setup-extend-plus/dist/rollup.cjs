"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/rollup.ts
var rollup_exports = {};
__export(rollup_exports, {
  default: () => rollup_default
});
module.exports = __toCommonJS(rollup_exports);

// src/core/unplugin.ts
var import_unplugin = require("unplugin");

// src/core/transform.ts
var import_path = require("path");
var import_compiler_sfc = require("@vue/compiler-sfc");
var import_magic_string = __toESM(require("magic-string"), 1);
function supportScriptName(code, id, options) {
  var _a;
  const { mode } = options;
  let s;
  const str = () => s || (s = new import_magic_string.default(code));
  const { descriptor } = (0, import_compiler_sfc.parse)(code);
  if (!descriptor.script && descriptor.scriptSetup && !((_a = descriptor.scriptSetup.attrs) == null ? void 0 : _a.extendIgnore)) {
    const result = (0, import_compiler_sfc.compileScript)(descriptor, { id });
    const name = typeof result.attrs.name === "string" ? result.attrs.name : nameProcess(id, mode);
    const lang = result.attrs.lang;
    const inheritAttrs = result.attrs.inheritAttrs;
    if (name || inheritAttrs) {
      str().appendLeft(
        0,
        `<script${lang ? ` lang="${lang}"` : ""}>
import { defineComponent } from 'vue'
export default defineComponent({
  ${name ? `name: "${name}",` : ""}
  ${inheritAttrs ? `inheritAttrs: ${inheritAttrs !== "false"},` : ""}
})
<\/script>
`
      );
    }
    const map = str().generateMap({ hires: true });
    const filename = (0, import_path.basename)(id);
    map.file = filename;
    map.sources = [filename];
    return {
      map,
      code: str().toString()
    };
  } else {
    return null;
  }
}
function nameProcess(id, mode) {
  const commonId = id.replace(/\\/g, "/").split("?")[0];
  if (typeof mode === "string") {
    const parseUrl = (0, import_path.parse)(commonId);
    const fileName = parseUrl.name;
    const relativeName = parseUrl.dir.split("/").at(-1);
    if (mode === "relativeName")
      return camelize(`${relativeName}-${fileName}`);
  }
  if (typeof mode === "function")
    return mode(commonId);
  return "";
}
function camelize(str) {
  return str.replace(/-(\w)/g, (_, c) => c ? c.toUpperCase() : "").replace(/(\w)/, (_, c) => c.toUpperCase());
}

// src/core/unplugin.ts
var unplugin_default = (0, import_unplugin.createUnplugin)((options = {}, meta) => {
  return {
    name: "unplugin-vue-setup-extend-plus",
    enforce: "pre",
    transformInclude(id) {
      return /\.vue$/.test(id) || /\.vue\?vue/.test(id);
    },
    async transform(code, id) {
      try {
        if (options.mode && options.mode === "none")
          return null;
        if (/\.vue$/.test(id) || /\.vue\?.*type=script.*/.test(id))
          return supportScriptName.call(this, code, id, options);
        return null;
      } catch (e) {
        if (meta.framework === "webpack") {
          console.error(e);
          return null;
        }
      }
    }
  };
});

// src/rollup.ts
var rollup_default = unplugin_default.rollup;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
exports.default = module.exports;