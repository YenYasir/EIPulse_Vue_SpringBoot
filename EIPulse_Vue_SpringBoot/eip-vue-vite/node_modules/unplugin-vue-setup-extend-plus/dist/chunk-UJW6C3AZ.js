// src/core/unplugin.ts
import { createUnplugin } from "unplugin";

// src/core/transform.ts
import { basename, parse as pathParse } from "path";
import { compileScript, parse } from "@vue/compiler-sfc";
import MagicString from "magic-string";
function supportScriptName(code, id, options) {
  var _a;
  const { mode } = options;
  let s;
  const str = () => s || (s = new MagicString(code));
  const { descriptor } = parse(code);
  if (!descriptor.script && descriptor.scriptSetup && !((_a = descriptor.scriptSetup.attrs) == null ? void 0 : _a.extendIgnore)) {
    const result = compileScript(descriptor, { id });
    const name = typeof result.attrs.name === "string" ? result.attrs.name : nameProcess(id, mode);
    const lang = result.attrs.lang;
    const inheritAttrs = result.attrs.inheritAttrs;
    if (name || inheritAttrs) {
      str().appendLeft(
        0,
        `<script${lang ? ` lang="${lang}"` : ""}>
import { defineComponent } from 'vue'
export default defineComponent({
  ${name ? `name: "${name}",` : ""}
  ${inheritAttrs ? `inheritAttrs: ${inheritAttrs !== "false"},` : ""}
})
<\/script>
`
      );
    }
    const map = str().generateMap({ hires: true });
    const filename = basename(id);
    map.file = filename;
    map.sources = [filename];
    return {
      map,
      code: str().toString()
    };
  } else {
    return null;
  }
}
function nameProcess(id, mode) {
  const commonId = id.replace(/\\/g, "/").split("?")[0];
  if (typeof mode === "string") {
    const parseUrl = pathParse(commonId);
    const fileName = parseUrl.name;
    const relativeName = parseUrl.dir.split("/").at(-1);
    if (mode === "relativeName")
      return camelize(`${relativeName}-${fileName}`);
  }
  if (typeof mode === "function")
    return mode(commonId);
  return "";
}
function camelize(str) {
  return str.replace(/-(\w)/g, (_, c) => c ? c.toUpperCase() : "").replace(/(\w)/, (_, c) => c.toUpperCase());
}

// src/core/unplugin.ts
var unplugin_default = createUnplugin((options = {}, meta) => {
  return {
    name: "unplugin-vue-setup-extend-plus",
    enforce: "pre",
    transformInclude(id) {
      return /\.vue$/.test(id) || /\.vue\?vue/.test(id);
    },
    async transform(code, id) {
      try {
        if (options.mode && options.mode === "none")
          return null;
        if (/\.vue$/.test(id) || /\.vue\?.*type=script.*/.test(id))
          return supportScriptName.call(this, code, id, options);
        return null;
      } catch (e) {
        if (meta.framework === "webpack") {
          console.error(e);
          return null;
        }
      }
    }
  };
});

export {
  unplugin_default
};
